/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { PullRequest } from './PullRequest'
import { PullRequestFromJSON, PullRequestFromJSONTyped, PullRequestToJSON } from './PullRequest'

/**
 * Branch refers to a VCS branch. Branches are feature branches associated with Shortcut Stories.
 * @export
 * @interface Branch
 */
export interface Branch {
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof Branch
   */
  entityType: string
  /**
   * A true/false boolean indicating if the Branch has been deleted.
   * @type {boolean}
   * @memberof Branch
   */
  deleted: boolean
  /**
   * The name of the Branch.
   * @type {string}
   * @memberof Branch
   */
  name: string
  /**
   * A true/false boolean indicating if the Branch is persistent; e.g. master.
   * @type {boolean}
   * @memberof Branch
   */
  persistent: boolean
  /**
   * The time/date the Branch was updated.
   * @type {Date}
   * @memberof Branch
   */
  updatedAt: Date | null
  /**
   * An array of PullRequests attached to the Branch (there is usually only one).
   * @type {Array<PullRequest>}
   * @memberof Branch
   */
  pullRequests: Array<PullRequest>
  /**
   * The IDs of the Branches the Branch has been merged into.
   * @type {Array<number>}
   * @memberof Branch
   */
  mergedBranchIds: Array<number>
  /**
   * The unique ID of the Branch.
   * @type {number}
   * @memberof Branch
   */
  id: number | null
  /**
   * The URL of the Branch.
   * @type {string}
   * @memberof Branch
   */
  url: string
  /**
   * The ID of the Repository that contains the Branch.
   * @type {number}
   * @memberof Branch
   */
  repositoryId: number
  /**
   * The time/date the Branch was created.
   * @type {Date}
   * @memberof Branch
   */
  createdAt: Date | null
}

/**
 * Check if a given object implements the Branch interface.
 */
export function instanceOfBranch(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'deleted' in value
  isInstance = isInstance && 'name' in value
  isInstance = isInstance && 'persistent' in value
  isInstance = isInstance && 'updatedAt' in value
  isInstance = isInstance && 'pullRequests' in value
  isInstance = isInstance && 'mergedBranchIds' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'url' in value
  isInstance = isInstance && 'repositoryId' in value
  isInstance = isInstance && 'createdAt' in value

  return isInstance
}

export function BranchFromJSON(json: any): Branch {
  return BranchFromJSONTyped(json, false)
}

export function BranchFromJSONTyped(json: any, ignoreDiscriminator: boolean): Branch {
  if (json === undefined || json === null) {
    return json
  }
  return {
    entityType: json['entity_type'],
    deleted: json['deleted'],
    name: json['name'],
    persistent: json['persistent'],
    updatedAt: json['updated_at'] === null ? null : new Date(json['updated_at']),
    pullRequests: (json['pull_requests'] as Array<any>).map(PullRequestFromJSON),
    mergedBranchIds: json['merged_branch_ids'],
    id: json['id'],
    url: json['url'],
    repositoryId: json['repository_id'],
    createdAt: json['created_at'] === null ? null : new Date(json['created_at']),
  }
}

export function BranchToJSON(value?: Branch | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    entity_type: value.entityType,
    deleted: value.deleted,
    name: value.name,
    persistent: value.persistent,
    updated_at: value.updatedAt === null ? null : value.updatedAt.toISOString(),
    pull_requests: (value.pullRequests as Array<any>).map(PullRequestToJSON),
    merged_branch_ids: value.mergedBranchIds,
    id: value.id,
    url: value.url,
    repository_id: value.repositoryId,
    created_at: value.createdAt === null ? null : value.createdAt.toISOString(),
  }
}
