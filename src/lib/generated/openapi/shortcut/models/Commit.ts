/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Identity } from './Identity';
import {
    IdentityFromJSON,
    IdentityFromJSONTyped,
    IdentityToJSON,
} from './Identity';

/**
 * Commit refers to a VCS commit and all associated details.
 * @export
 * @interface Commit
 */
export interface Commit {
    /**
     * A string description of this resource.
     * @type {string}
     * @memberof Commit
     */
    entityType: string;
    /**
     * The ID of the Member that authored the Commit, if known.
     * @type {string}
     * @memberof Commit
     */
    authorId: string | null;
    /**
     * The Commit hash.
     * @type {string}
     * @memberof Commit
     */
    hash: string;
    /**
     * The time/date the Commit was updated.
     * @type {Date}
     * @memberof Commit
     */
    updatedAt: Date | null;
    /**
     * The unique ID of the Commit.
     * @type {number}
     * @memberof Commit
     */
    id: number | null;
    /**
     * The URL of the Commit.
     * @type {string}
     * @memberof Commit
     */
    url: string;
    /**
     * The email address of the VCS user that authored the Commit.
     * @type {string}
     * @memberof Commit
     */
    authorEmail: string;
    /**
     * The time/date the Commit was pushed.
     * @type {Date}
     * @memberof Commit
     */
    timestamp: Date;
    /**
     * 
     * @type {Identity}
     * @memberof Commit
     */
    authorIdentity: Identity;
    /**
     * The ID of the Repository that contains the Commit.
     * @type {number}
     * @memberof Commit
     */
    repositoryId: number | null;
    /**
     * The time/date the Commit was created.
     * @type {Date}
     * @memberof Commit
     */
    createdAt: Date;
    /**
     * The Commit message.
     * @type {string}
     * @memberof Commit
     */
    message: string;
}

/**
 * Check if a given object implements the Commit interface.
 */
export function instanceOfCommit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "authorId" in value;
    isInstance = isInstance && "hash" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "authorEmail" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "authorIdentity" in value;
    isInstance = isInstance && "repositoryId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function CommitFromJSON(json: any): Commit {
    return CommitFromJSONTyped(json, false);
}

export function CommitFromJSONTyped(json: any, ignoreDiscriminator: boolean): Commit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityType': json['entity_type'],
        'authorId': json['author_id'],
        'hash': json['hash'],
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'id': json['id'],
        'url': json['url'],
        'authorEmail': json['author_email'],
        'timestamp': (new Date(json['timestamp'])),
        'authorIdentity': IdentityFromJSON(json['author_identity']),
        'repositoryId': json['repository_id'],
        'createdAt': (new Date(json['created_at'])),
        'message': json['message'],
    };
}

export function CommitToJSON(value?: Commit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entity_type': value.entityType,
        'author_id': value.authorId,
        'hash': value.hash,
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'id': value.id,
        'url': value.url,
        'author_email': value.authorEmail,
        'timestamp': (value.timestamp.toISOString()),
        'author_identity': IdentityToJSON(value.authorIdentity),
        'repository_id': value.repositoryId,
        'created_at': (value.createdAt.toISOString()),
        'message': value.message,
    };
}

