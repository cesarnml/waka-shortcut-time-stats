/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateLabelParams } from './CreateLabelParams';
import {
    CreateLabelParamsFromJSON,
    CreateLabelParamsFromJSONTyped,
    CreateLabelParamsToJSON,
} from './CreateLabelParams';

/**
 * 
 * @export
 * @interface CreateEpic
 */
export interface CreateEpic {
    /**
     * The Epic's description.
     * @type {string}
     * @memberof CreateEpic
     */
    description?: string;
    /**
     * An array of Labels attached to the Epic.
     * @type {Array<CreateLabelParams>}
     * @memberof CreateEpic
     */
    labels?: Array<CreateLabelParams>;
    /**
     * A manual override for the time/date the Epic was completed.
     * @type {Date}
     * @memberof CreateEpic
     */
    completedAtOverride?: Date;
    /**
     * The Epic's name.
     * @type {string}
     * @memberof CreateEpic
     */
    name: string;
    /**
     * The Epic's planned start date.
     * @type {Date}
     * @memberof CreateEpic
     */
    plannedStartDate?: Date | null;
    /**
     * `Deprecated` The Epic's state (to do, in progress, or done); will be ignored when `epic_state_id` is set.
     * @type {string}
     * @memberof CreateEpic
     */
    state?: CreateEpicStateEnum;
    /**
     * The ID of the Milestone this Epic is related to.
     * @type {number}
     * @memberof CreateEpic
     */
    milestoneId?: number | null;
    /**
     * The ID of the member that requested the epic.
     * @type {string}
     * @memberof CreateEpic
     */
    requestedById?: string;
    /**
     * The ID of the Epic State.
     * @type {number}
     * @memberof CreateEpic
     */
    epicStateId?: number;
    /**
     * A manual override for the time/date the Epic was started.
     * @type {Date}
     * @memberof CreateEpic
     */
    startedAtOverride?: Date;
    /**
     * The ID of the group to associate with the epic.
     * @type {string}
     * @memberof CreateEpic
     */
    groupId?: string | null;
    /**
     * Defaults to the time/date it is created but can be set to reflect another date.
     * @type {Date}
     * @memberof CreateEpic
     */
    updatedAt?: Date;
    /**
     * An array of UUIDs for any Members you want to add as Followers on this new Epic.
     * @type {Array<string>}
     * @memberof CreateEpic
     */
    followerIds?: Array<string>;
    /**
     * An array of UUIDs for any members you want to add as Owners on this new Epic.
     * @type {Array<string>}
     * @memberof CreateEpic
     */
    ownerIds?: Array<string>;
    /**
     * This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.
     * @type {string}
     * @memberof CreateEpic
     */
    externalId?: string;
    /**
     * The Epic's deadline.
     * @type {Date}
     * @memberof CreateEpic
     */
    deadline?: Date | null;
    /**
     * Defaults to the time/date it is created but can be set to reflect another date.
     * @type {Date}
     * @memberof CreateEpic
     */
    createdAt?: Date;
}


/**
 * @export
 */
export const CreateEpicStateEnum = {
    InProgress: 'in progress',
    ToDo: 'to do',
    Done: 'done'
} as const;
export type CreateEpicStateEnum = typeof CreateEpicStateEnum[keyof typeof CreateEpicStateEnum];


/**
 * Check if a given object implements the CreateEpic interface.
 */
export function instanceOfCreateEpic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function CreateEpicFromJSON(json: any): CreateEpic {
    return CreateEpicFromJSONTyped(json, false);
}

export function CreateEpicFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateEpic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'labels': !exists(json, 'labels') ? undefined : ((json['labels'] as Array<any>).map(CreateLabelParamsFromJSON)),
        'completedAtOverride': !exists(json, 'completed_at_override') ? undefined : (new Date(json['completed_at_override'])),
        'name': json['name'],
        'plannedStartDate': !exists(json, 'planned_start_date') ? undefined : (json['planned_start_date'] === null ? null : new Date(json['planned_start_date'])),
        'state': !exists(json, 'state') ? undefined : json['state'],
        'milestoneId': !exists(json, 'milestone_id') ? undefined : json['milestone_id'],
        'requestedById': !exists(json, 'requested_by_id') ? undefined : json['requested_by_id'],
        'epicStateId': !exists(json, 'epic_state_id') ? undefined : json['epic_state_id'],
        'startedAtOverride': !exists(json, 'started_at_override') ? undefined : (new Date(json['started_at_override'])),
        'groupId': !exists(json, 'group_id') ? undefined : json['group_id'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'followerIds': !exists(json, 'follower_ids') ? undefined : json['follower_ids'],
        'ownerIds': !exists(json, 'owner_ids') ? undefined : json['owner_ids'],
        'externalId': !exists(json, 'external_id') ? undefined : json['external_id'],
        'deadline': !exists(json, 'deadline') ? undefined : (json['deadline'] === null ? null : new Date(json['deadline'])),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
    };
}

export function CreateEpicToJSON(value?: CreateEpic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'labels': value.labels === undefined ? undefined : ((value.labels as Array<any>).map(CreateLabelParamsToJSON)),
        'completed_at_override': value.completedAtOverride === undefined ? undefined : (value.completedAtOverride.toISOString()),
        'name': value.name,
        'planned_start_date': value.plannedStartDate === undefined ? undefined : (value.plannedStartDate === null ? null : value.plannedStartDate.toISOString()),
        'state': value.state,
        'milestone_id': value.milestoneId,
        'requested_by_id': value.requestedById,
        'epic_state_id': value.epicStateId,
        'started_at_override': value.startedAtOverride === undefined ? undefined : (value.startedAtOverride.toISOString()),
        'group_id': value.groupId,
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'follower_ids': value.followerIds,
        'owner_ids': value.ownerIds,
        'external_id': value.externalId,
        'deadline': value.deadline === undefined ? undefined : (value.deadline === null ? null : value.deadline.toISOString()),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

