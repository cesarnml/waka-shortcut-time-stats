/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateGroup
 */
export interface CreateGroup {
    /**
     * The description of the Group.
     * @type {string}
     * @memberof CreateGroup
     */
    description?: string;
    /**
     * The Member ids to add to this Group.
     * @type {Set<string>}
     * @memberof CreateGroup
     */
    memberIds?: Set<string>;
    /**
     * The Workflow ids to add to the Group.
     * @type {Array<number>}
     * @memberof CreateGroup
     */
    workflowIds?: Array<number>;
    /**
     * The name of this Group.
     * @type {string}
     * @memberof CreateGroup
     */
    name: string;
    /**
     * The mention name of this Group.
     * @type {string}
     * @memberof CreateGroup
     */
    mentionName: string;
    /**
     * The color you wish to use for the Group in the system.
     * @type {string}
     * @memberof CreateGroup
     */
    color?: string;
    /**
     * The color key you wish to use for the Group in the system.
     * @type {string}
     * @memberof CreateGroup
     */
    colorKey?: CreateGroupColorKeyEnum;
    /**
     * The Icon id for the avatar of this Group.
     * @type {string}
     * @memberof CreateGroup
     */
    displayIconId?: string;
}


/**
 * @export
 */
export const CreateGroupColorKeyEnum = {
    Blue: 'blue',
    Purple: 'purple',
    MidnightBlue: 'midnight-blue',
    Orange: 'orange',
    YellowGreen: 'yellow-green',
    Brass: 'brass',
    Gray: 'gray',
    Fuchsia: 'fuchsia',
    Yellow: 'yellow',
    Pink: 'pink',
    SkyBlue: 'sky-blue',
    Green: 'green',
    Red: 'red',
    Black: 'black',
    Slate: 'slate',
    Turquoise: 'turquoise'
} as const;
export type CreateGroupColorKeyEnum = typeof CreateGroupColorKeyEnum[keyof typeof CreateGroupColorKeyEnum];


/**
 * Check if a given object implements the CreateGroup interface.
 */
export function instanceOfCreateGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "mentionName" in value;

    return isInstance;
}

export function CreateGroupFromJSON(json: any): CreateGroup {
    return CreateGroupFromJSONTyped(json, false);
}

export function CreateGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'memberIds': !exists(json, 'member_ids') ? undefined : json['member_ids'],
        'workflowIds': !exists(json, 'workflow_ids') ? undefined : json['workflow_ids'],
        'name': json['name'],
        'mentionName': json['mention_name'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'colorKey': !exists(json, 'color_key') ? undefined : json['color_key'],
        'displayIconId': !exists(json, 'display_icon_id') ? undefined : json['display_icon_id'],
    };
}

export function CreateGroupToJSON(value?: CreateGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'member_ids': value.memberIds === undefined ? undefined : Array.from(value.memberIds as Set<any>),
        'workflow_ids': value.workflowIds,
        'name': value.name,
        'mention_name': value.mentionName,
        'color': value.color,
        'color_key': value.colorKey,
        'display_icon_id': value.displayIconId,
    };
}

