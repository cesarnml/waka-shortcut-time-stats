/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 * Request parameters for creating a Comment on a Shortcut Story.
 * @export
 * @interface CreateStoryCommentParams
 */
export interface CreateStoryCommentParams {
  /**
   * The comment text.
   * @type {string}
   * @memberof CreateStoryCommentParams
   */
  text: string
  /**
   * The Member ID of the Comment's author. Defaults to the user identified by the API token.
   * @type {string}
   * @memberof CreateStoryCommentParams
   */
  authorId?: string
  /**
   * Defaults to the time/date the comment is created, but can be set to reflect another date.
   * @type {Date}
   * @memberof CreateStoryCommentParams
   */
  createdAt?: Date
  /**
   * Defaults to the time/date the comment is last updated, but can be set to reflect another date.
   * @type {Date}
   * @memberof CreateStoryCommentParams
   */
  updatedAt?: Date
  /**
   * This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.
   * @type {string}
   * @memberof CreateStoryCommentParams
   */
  externalId?: string
  /**
   * The ID of the Comment that this comment is threaded under.
   * @type {number}
   * @memberof CreateStoryCommentParams
   */
  parentId?: number | null
  /**
   * Marks the comment as a blocker that can be surfaced to permissions or teams mentioned in the comment. Can only be used on a top-level comment.
   * @type {boolean}
   * @memberof CreateStoryCommentParams
   */
  blocker?: boolean
  /**
   * Marks the comment as an unblocker to its  blocker parent. Can only be set on a threaded comment who has a parent with `blocker` set.
   * @type {boolean}
   * @memberof CreateStoryCommentParams
   */
  unblocksParent?: boolean
}

/**
 * Check if a given object implements the CreateStoryCommentParams interface.
 */
export function instanceOfCreateStoryCommentParams(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'text' in value

  return isInstance
}

export function CreateStoryCommentParamsFromJSON(json: any): CreateStoryCommentParams {
  return CreateStoryCommentParamsFromJSONTyped(json, false)
}

export function CreateStoryCommentParamsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CreateStoryCommentParams {
  if (json === undefined || json === null) {
    return json
  }
  return {
    text: json['text'],
    authorId: !exists(json, 'author_id') ? undefined : json['author_id'],
    createdAt: !exists(json, 'created_at') ? undefined : new Date(json['created_at']),
    updatedAt: !exists(json, 'updated_at') ? undefined : new Date(json['updated_at']),
    externalId: !exists(json, 'external_id') ? undefined : json['external_id'],
    parentId: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    blocker: !exists(json, 'blocker') ? undefined : json['blocker'],
    unblocksParent: !exists(json, 'unblocks_parent') ? undefined : json['unblocks_parent'],
  }
}

export function CreateStoryCommentParamsToJSON(value?: CreateStoryCommentParams | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    text: value.text,
    author_id: value.authorId,
    created_at: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updated_at: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    external_id: value.externalId,
    parent_id: value.parentId,
    blocker: value.blocker,
    unblocks_parent: value.unblocksParent,
  }
}
