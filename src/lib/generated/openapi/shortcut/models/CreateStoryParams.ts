/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateLabelParams } from './CreateLabelParams';
import {
    CreateLabelParamsFromJSON,
    CreateLabelParamsFromJSONTyped,
    CreateLabelParamsToJSON,
} from './CreateLabelParams';
import type { CreateStoryCommentParams } from './CreateStoryCommentParams';
import {
    CreateStoryCommentParamsFromJSON,
    CreateStoryCommentParamsFromJSONTyped,
    CreateStoryCommentParamsToJSON,
} from './CreateStoryCommentParams';
import type { CreateStoryLinkParams } from './CreateStoryLinkParams';
import {
    CreateStoryLinkParamsFromJSON,
    CreateStoryLinkParamsFromJSONTyped,
    CreateStoryLinkParamsToJSON,
} from './CreateStoryLinkParams';
import type { CreateTaskParams } from './CreateTaskParams';
import {
    CreateTaskParamsFromJSON,
    CreateTaskParamsFromJSONTyped,
    CreateTaskParamsToJSON,
} from './CreateTaskParams';
import type { CustomFieldValueParams } from './CustomFieldValueParams';
import {
    CustomFieldValueParamsFromJSON,
    CustomFieldValueParamsFromJSONTyped,
    CustomFieldValueParamsToJSON,
} from './CustomFieldValueParams';

/**
 * Request parameters for creating a story.
 * @export
 * @interface CreateStoryParams
 */
export interface CreateStoryParams {
    /**
     * The description of the story.
     * @type {string}
     * @memberof CreateStoryParams
     */
    description?: string;
    /**
     * Controls the story's archived state.
     * @type {boolean}
     * @memberof CreateStoryParams
     */
    archived?: boolean;
    /**
     * An array of story links attached to the story.
     * @type {Array<CreateStoryLinkParams>}
     * @memberof CreateStoryParams
     */
    storyLinks?: Array<CreateStoryLinkParams>;
    /**
     * An array of labels attached to the story.
     * @type {Array<CreateLabelParams>}
     * @memberof CreateStoryParams
     */
    labels?: Array<CreateLabelParams>;
    /**
     * The type of story (feature, bug, chore).
     * @type {string}
     * @memberof CreateStoryParams
     */
    storyType?: CreateStoryParamsStoryTypeEnum;
    /**
     * A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
     * @type {Array<CustomFieldValueParams>}
     * @memberof CreateStoryParams
     */
    customFields?: Array<CustomFieldValueParams>;
    /**
     * One of "first" or "last". This can be used to move the given story to the first or last position in the workflow state.
     * @type {string}
     * @memberof CreateStoryParams
     */
    moveTo?: CreateStoryParamsMoveToEnum;
    /**
     * An array of IDs of files attached to the story.
     * @type {Set<number>}
     * @memberof CreateStoryParams
     */
    fileIds?: Set<number>;
    /**
     * A manual override for the time/date the Story was completed.
     * @type {Date}
     * @memberof CreateStoryParams
     */
    completedAtOverride?: Date;
    /**
     * The name of the story.
     * @type {string}
     * @memberof CreateStoryParams
     */
    name: string;
    /**
     * An array of comments to add to the story.
     * @type {Array<CreateStoryCommentParams>}
     * @memberof CreateStoryParams
     */
    comments?: Array<CreateStoryCommentParams>;
    /**
     * The ID of the epic the story belongs to.
     * @type {number}
     * @memberof CreateStoryParams
     */
    epicId?: number | null;
    /**
     * The id of the story template used to create this story, if applicable. This is just an association; no content from the story template is inherited by the story simply by setting this field.
     * @type {string}
     * @memberof CreateStoryParams
     */
    storyTemplateId?: string | null;
    /**
     * An array of External Links associated with this story.
     * @type {Array<string>}
     * @memberof CreateStoryParams
     */
    externalLinks?: Array<string>;
    /**
     * The ID of the member that requested the story.
     * @type {string}
     * @memberof CreateStoryParams
     */
    requestedById?: string;
    /**
     * The ID of the iteration the story belongs to.
     * @type {number}
     * @memberof CreateStoryParams
     */
    iterationId?: number | null;
    /**
     * An array of tasks connected to the story.
     * @type {Array<CreateTaskParams>}
     * @memberof CreateStoryParams
     */
    tasks?: Array<CreateTaskParams>;
    /**
     * A manual override for the time/date the Story was started.
     * @type {Date}
     * @memberof CreateStoryParams
     */
    startedAtOverride?: Date;
    /**
     * The id of the group to associate with this story.
     * @type {string}
     * @memberof CreateStoryParams
     */
    groupId?: string | null;
    /**
     * The ID of the workflow state the story will be in.
     * @type {number}
     * @memberof CreateStoryParams
     */
    workflowStateId?: number;
    /**
     * The time/date the Story was updated.
     * @type {Date}
     * @memberof CreateStoryParams
     */
    updatedAt?: Date;
    /**
     * An array of UUIDs of the followers of this story.
     * @type {Set<string>}
     * @memberof CreateStoryParams
     */
    followerIds?: Set<string>;
    /**
     * An array of UUIDs of the owners of this story.
     * @type {Set<string>}
     * @memberof CreateStoryParams
     */
    ownerIds?: Set<string>;
    /**
     * This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
     * @type {string}
     * @memberof CreateStoryParams
     */
    externalId?: string;
    /**
     * The numeric point estimate of the story. Can also be null, which means unestimated.
     * @type {number}
     * @memberof CreateStoryParams
     */
    estimate?: number | null;
    /**
     * The ID of the project the story belongs to.
     * @type {number}
     * @memberof CreateStoryParams
     */
    projectId?: number | null;
    /**
     * An array of IDs of linked files attached to the story.
     * @type {Set<number>}
     * @memberof CreateStoryParams
     */
    linkedFileIds?: Set<number>;
    /**
     * The due date of the story.
     * @type {Date}
     * @memberof CreateStoryParams
     */
    deadline?: Date | null;
    /**
     * The time/date the Story was created.
     * @type {Date}
     * @memberof CreateStoryParams
     */
    createdAt?: Date;
}


/**
 * @export
 */
export const CreateStoryParamsStoryTypeEnum = {
    Feature: 'feature',
    Chore: 'chore',
    Bug: 'bug'
} as const;
export type CreateStoryParamsStoryTypeEnum = typeof CreateStoryParamsStoryTypeEnum[keyof typeof CreateStoryParamsStoryTypeEnum];

/**
 * @export
 */
export const CreateStoryParamsMoveToEnum = {
    Last: 'last',
    First: 'first'
} as const;
export type CreateStoryParamsMoveToEnum = typeof CreateStoryParamsMoveToEnum[keyof typeof CreateStoryParamsMoveToEnum];


/**
 * Check if a given object implements the CreateStoryParams interface.
 */
export function instanceOfCreateStoryParams(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function CreateStoryParamsFromJSON(json: any): CreateStoryParams {
    return CreateStoryParamsFromJSONTyped(json, false);
}

export function CreateStoryParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateStoryParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'archived': !exists(json, 'archived') ? undefined : json['archived'],
        'storyLinks': !exists(json, 'story_links') ? undefined : ((json['story_links'] as Array<any>).map(CreateStoryLinkParamsFromJSON)),
        'labels': !exists(json, 'labels') ? undefined : ((json['labels'] as Array<any>).map(CreateLabelParamsFromJSON)),
        'storyType': !exists(json, 'story_type') ? undefined : json['story_type'],
        'customFields': !exists(json, 'custom_fields') ? undefined : ((json['custom_fields'] as Array<any>).map(CustomFieldValueParamsFromJSON)),
        'moveTo': !exists(json, 'move_to') ? undefined : json['move_to'],
        'fileIds': !exists(json, 'file_ids') ? undefined : json['file_ids'],
        'completedAtOverride': !exists(json, 'completed_at_override') ? undefined : (new Date(json['completed_at_override'])),
        'name': json['name'],
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CreateStoryCommentParamsFromJSON)),
        'epicId': !exists(json, 'epic_id') ? undefined : json['epic_id'],
        'storyTemplateId': !exists(json, 'story_template_id') ? undefined : json['story_template_id'],
        'externalLinks': !exists(json, 'external_links') ? undefined : json['external_links'],
        'requestedById': !exists(json, 'requested_by_id') ? undefined : json['requested_by_id'],
        'iterationId': !exists(json, 'iteration_id') ? undefined : json['iteration_id'],
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(CreateTaskParamsFromJSON)),
        'startedAtOverride': !exists(json, 'started_at_override') ? undefined : (new Date(json['started_at_override'])),
        'groupId': !exists(json, 'group_id') ? undefined : json['group_id'],
        'workflowStateId': !exists(json, 'workflow_state_id') ? undefined : json['workflow_state_id'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'followerIds': !exists(json, 'follower_ids') ? undefined : json['follower_ids'],
        'ownerIds': !exists(json, 'owner_ids') ? undefined : json['owner_ids'],
        'externalId': !exists(json, 'external_id') ? undefined : json['external_id'],
        'estimate': !exists(json, 'estimate') ? undefined : json['estimate'],
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'linkedFileIds': !exists(json, 'linked_file_ids') ? undefined : json['linked_file_ids'],
        'deadline': !exists(json, 'deadline') ? undefined : (json['deadline'] === null ? null : new Date(json['deadline'])),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
    };
}

export function CreateStoryParamsToJSON(value?: CreateStoryParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'archived': value.archived,
        'story_links': value.storyLinks === undefined ? undefined : ((value.storyLinks as Array<any>).map(CreateStoryLinkParamsToJSON)),
        'labels': value.labels === undefined ? undefined : ((value.labels as Array<any>).map(CreateLabelParamsToJSON)),
        'story_type': value.storyType,
        'custom_fields': value.customFields === undefined ? undefined : ((value.customFields as Array<any>).map(CustomFieldValueParamsToJSON)),
        'move_to': value.moveTo,
        'file_ids': value.fileIds === undefined ? undefined : Array.from(value.fileIds as Set<any>),
        'completed_at_override': value.completedAtOverride === undefined ? undefined : (value.completedAtOverride.toISOString()),
        'name': value.name,
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CreateStoryCommentParamsToJSON)),
        'epic_id': value.epicId,
        'story_template_id': value.storyTemplateId,
        'external_links': value.externalLinks,
        'requested_by_id': value.requestedById,
        'iteration_id': value.iterationId,
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(CreateTaskParamsToJSON)),
        'started_at_override': value.startedAtOverride === undefined ? undefined : (value.startedAtOverride.toISOString()),
        'group_id': value.groupId,
        'workflow_state_id': value.workflowStateId,
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'follower_ids': value.followerIds === undefined ? undefined : Array.from(value.followerIds as Set<any>),
        'owner_ids': value.ownerIds === undefined ? undefined : Array.from(value.ownerIds as Set<any>),
        'external_id': value.externalId,
        'estimate': value.estimate,
        'project_id': value.projectId,
        'linked_file_ids': value.linkedFileIds === undefined ? undefined : Array.from(value.linkedFileIds as Set<any>),
        'deadline': value.deadline === undefined ? undefined : (value.deadline === null ? null : value.deadline.toISOString()),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

