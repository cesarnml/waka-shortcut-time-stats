/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomFieldEnumValue } from './CustomFieldEnumValue';
import {
    CustomFieldEnumValueFromJSON,
    CustomFieldEnumValueFromJSONTyped,
    CustomFieldEnumValueToJSON,
} from './CustomFieldEnumValue';

/**
 * 
 * @export
 * @interface CustomField
 */
export interface CustomField {
    /**
     * A string description of the CustomField
     * @type {string}
     * @memberof CustomField
     */
    description?: string;
    /**
     * A string that represents the icon that corresponds to this custom field.
     * @type {string}
     * @memberof CustomField
     */
    iconSetIdentifier?: string;
    /**
     * A string description of this resource.
     * @type {string}
     * @memberof CustomField
     */
    entityType: CustomFieldEntityTypeEnum;
    /**
     * The types of stories this CustomField is scoped to.
     * @type {Array<string>}
     * @memberof CustomField
     */
    storyTypes?: Array<string>;
    /**
     * The name of the Custom Field.
     * @type {string}
     * @memberof CustomField
     */
    name: string;
    /**
     * When true, the CustomFieldEnumValues may not be reordered.
     * @type {boolean}
     * @memberof CustomField
     */
    fixedPosition?: boolean;
    /**
     * The instant when this CustomField was last updated.
     * @type {Date}
     * @memberof CustomField
     */
    updatedAt: Date;
    /**
     * The unique public ID for the CustomField.
     * @type {string}
     * @memberof CustomField
     */
    id: string;
    /**
     * A collection of legal values for a CustomField.
     * @type {Array<CustomFieldEnumValue>}
     * @memberof CustomField
     */
    values?: Array<CustomFieldEnumValue>;
    /**
     * The type of Custom Field, eg. 'enum'.
     * @type {string}
     * @memberof CustomField
     */
    fieldType: CustomFieldFieldTypeEnum;
    /**
     * An integer indicating the position of this Custom Field with respect to the other CustomField
     * @type {number}
     * @memberof CustomField
     */
    position: number;
    /**
     * The canonical name for a Shortcut-defined field.
     * @type {string}
     * @memberof CustomField
     */
    canonicalName?: string;
    /**
     * When true, the CustomField can be applied to entities in the Workspace.
     * @type {boolean}
     * @memberof CustomField
     */
    enabled: boolean;
    /**
     * The instant when this CustomField was created.
     * @type {Date}
     * @memberof CustomField
     */
    createdAt: Date;
}


/**
 * @export
 */
export const CustomFieldEntityTypeEnum = {
    CustomField: 'custom-field'
} as const;
export type CustomFieldEntityTypeEnum = typeof CustomFieldEntityTypeEnum[keyof typeof CustomFieldEntityTypeEnum];

/**
 * @export
 */
export const CustomFieldFieldTypeEnum = {
    Enum: 'enum'
} as const;
export type CustomFieldFieldTypeEnum = typeof CustomFieldFieldTypeEnum[keyof typeof CustomFieldFieldTypeEnum];


/**
 * Check if a given object implements the CustomField interface.
 */
export function instanceOfCustomField(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "fieldType" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "enabled" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function CustomFieldFromJSON(json: any): CustomField {
    return CustomFieldFromJSONTyped(json, false);
}

export function CustomFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'iconSetIdentifier': !exists(json, 'icon_set_identifier') ? undefined : json['icon_set_identifier'],
        'entityType': json['entity_type'],
        'storyTypes': !exists(json, 'story_types') ? undefined : json['story_types'],
        'name': json['name'],
        'fixedPosition': !exists(json, 'fixed_position') ? undefined : json['fixed_position'],
        'updatedAt': (new Date(json['updated_at'])),
        'id': json['id'],
        'values': !exists(json, 'values') ? undefined : ((json['values'] as Array<any>).map(CustomFieldEnumValueFromJSON)),
        'fieldType': json['field_type'],
        'position': json['position'],
        'canonicalName': !exists(json, 'canonical_name') ? undefined : json['canonical_name'],
        'enabled': json['enabled'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function CustomFieldToJSON(value?: CustomField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'icon_set_identifier': value.iconSetIdentifier,
        'entity_type': value.entityType,
        'story_types': value.storyTypes,
        'name': value.name,
        'fixed_position': value.fixedPosition,
        'updated_at': (value.updatedAt.toISOString()),
        'id': value.id,
        'values': value.values === undefined ? undefined : ((value.values as Array<any>).map(CustomFieldEnumValueToJSON)),
        'field_type': value.fieldType,
        'position': value.position,
        'canonical_name': value.canonicalName,
        'enabled': value.enabled,
        'created_at': (value.createdAt.toISOString()),
    };
}

