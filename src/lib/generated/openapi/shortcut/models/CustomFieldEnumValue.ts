/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface CustomFieldEnumValue
 */
export interface CustomFieldEnumValue {
  /**
   * The unique public ID for the Custom Field.
   * @type {string}
   * @memberof CustomFieldEnumValue
   */
  id: string
  /**
   * A string value within the domain of this Custom Field.
   * @type {string}
   * @memberof CustomFieldEnumValue
   */
  value: string
  /**
   * An integer indicating the position of this Value with respect to the other CustomFieldEnumValues in the enumeration.
   * @type {number}
   * @memberof CustomFieldEnumValue
   */
  position: number
  /**
   * A color key associated with this CustomFieldEnumValue.
   * @type {string}
   * @memberof CustomFieldEnumValue
   */
  colorKey: string | null
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof CustomFieldEnumValue
   */
  entityType: CustomFieldEnumValueEntityTypeEnum
  /**
   * When true, the CustomFieldEnumValue can be selected for the CustomField.
   * @type {boolean}
   * @memberof CustomFieldEnumValue
   */
  enabled: boolean
}

/**
 * @export
 */
export const CustomFieldEnumValueEntityTypeEnum = {
  CustomFieldEnumValue: 'custom-field-enum-value',
} as const
export type CustomFieldEnumValueEntityTypeEnum =
  (typeof CustomFieldEnumValueEntityTypeEnum)[keyof typeof CustomFieldEnumValueEntityTypeEnum]

/**
 * Check if a given object implements the CustomFieldEnumValue interface.
 */
export function instanceOfCustomFieldEnumValue(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'value' in value
  isInstance = isInstance && 'position' in value
  isInstance = isInstance && 'colorKey' in value
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'enabled' in value

  return isInstance
}

export function CustomFieldEnumValueFromJSON(json: any): CustomFieldEnumValue {
  return CustomFieldEnumValueFromJSONTyped(json, false)
}

export function CustomFieldEnumValueFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CustomFieldEnumValue {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: json['id'],
    value: json['value'],
    position: json['position'],
    colorKey: json['color_key'],
    entityType: json['entity_type'],
    enabled: json['enabled'],
  }
}

export function CustomFieldEnumValueToJSON(value?: CustomFieldEnumValue | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    id: value.id,
    value: value.value,
    position: value.position,
    color_key: value.colorKey,
    entity_type: value.entityType,
    enabled: value.enabled,
  }
}
