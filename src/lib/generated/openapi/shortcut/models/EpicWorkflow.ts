/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { EpicState } from './EpicState'
import { EpicStateFromJSON, EpicStateFromJSONTyped, EpicStateToJSON } from './EpicState'

/**
 * Epic Workflow is the array of defined Epic States. Epic Workflow can be queried using the API but must be updated in the Shortcut UI.
 * @export
 * @interface EpicWorkflow
 */
export interface EpicWorkflow {
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof EpicWorkflow
   */
  entityType: string
  /**
   * The unique ID of the Epic Workflow.
   * @type {number}
   * @memberof EpicWorkflow
   */
  id: number
  /**
   * The date the Epic Workflow was created.
   * @type {Date}
   * @memberof EpicWorkflow
   */
  createdAt: Date
  /**
   * The date the Epic Workflow was updated.
   * @type {Date}
   * @memberof EpicWorkflow
   */
  updatedAt: Date
  /**
   * The unique ID of the default Epic State that new Epics are assigned by default.
   * @type {number}
   * @memberof EpicWorkflow
   */
  defaultEpicStateId: number
  /**
   * A map of the Epic States in this Epic Workflow.
   * @type {Array<EpicState>}
   * @memberof EpicWorkflow
   */
  epicStates: Array<EpicState>
}

/**
 * Check if a given object implements the EpicWorkflow interface.
 */
export function instanceOfEpicWorkflow(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'createdAt' in value
  isInstance = isInstance && 'updatedAt' in value
  isInstance = isInstance && 'defaultEpicStateId' in value
  isInstance = isInstance && 'epicStates' in value

  return isInstance
}

export function EpicWorkflowFromJSON(json: any): EpicWorkflow {
  return EpicWorkflowFromJSONTyped(json, false)
}

export function EpicWorkflowFromJSONTyped(json: any, ignoreDiscriminator: boolean): EpicWorkflow {
  if (json === undefined || json === null) {
    return json
  }
  return {
    entityType: json['entity_type'],
    id: json['id'],
    createdAt: new Date(json['created_at']),
    updatedAt: new Date(json['updated_at']),
    defaultEpicStateId: json['default_epic_state_id'],
    epicStates: (json['epic_states'] as Array<any>).map(EpicStateFromJSON),
  }
}

export function EpicWorkflowToJSON(value?: EpicWorkflow | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    entity_type: value.entityType,
    id: value.id,
    created_at: value.createdAt.toISOString(),
    updated_at: value.updatedAt.toISOString(),
    default_epic_state_id: value.defaultEpicStateId,
    epic_states: (value.epicStates as Array<any>).map(EpicStateToJSON),
  }
}
