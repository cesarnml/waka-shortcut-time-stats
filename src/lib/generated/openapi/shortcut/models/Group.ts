/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Icon } from './Icon';
import {
    IconFromJSON,
    IconFromJSONTyped,
    IconToJSON,
} from './Icon';

/**
 * A Group.
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * The Shortcut application url for the Group.
     * @type {string}
     * @memberof Group
     */
    appUrl: string;
    /**
     * The description of the Group.
     * @type {string}
     * @memberof Group
     */
    description: string;
    /**
     * Whether or not the Group is archived.
     * @type {boolean}
     * @memberof Group
     */
    archived: boolean;
    /**
     * A string description of this resource.
     * @type {string}
     * @memberof Group
     */
    entityType: string;
    /**
     * The hex color to be displayed with the Group (for example, "#ff0000").
     * @type {string}
     * @memberof Group
     */
    color: string | null;
    /**
     * The number of stories assigned to the group which are in a started workflow state.
     * @type {number}
     * @memberof Group
     */
    numStoriesStarted: number;
    /**
     * The mention name of the Group.
     * @type {string}
     * @memberof Group
     */
    mentionName: string;
    /**
     * The name of the Group.
     * @type {string}
     * @memberof Group
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    globalId: string;
    /**
     * The color key to be displayed with the Group.
     * @type {string}
     * @memberof Group
     */
    colorKey: GroupColorKeyEnum;
    /**
     * The total number of stories assigned ot the group.
     * @type {number}
     * @memberof Group
     */
    numStories: number;
    /**
     * The number of epics assigned to the group which are in the started workflow state.
     * @type {number}
     * @memberof Group
     */
    numEpicsStarted: number;
    /**
     * The number of stories assigned to the group which are in a backlog workflow state.
     * @type {number}
     * @memberof Group
     */
    numStoriesBacklog: number;
    /**
     * The id of the Group.
     * @type {string}
     * @memberof Group
     */
    id: string;
    /**
     * 
     * @type {Icon}
     * @memberof Group
     */
    displayIcon: Icon;
    /**
     * The Member IDs contain within the Group.
     * @type {Array<string>}
     * @memberof Group
     */
    memberIds: Array<string>;
    /**
     * The Workflow IDs contained within the Group.
     * @type {Array<number>}
     * @memberof Group
     */
    workflowIds: Array<number>;
}


/**
 * @export
 */
export const GroupColorKeyEnum = {
    Blue: 'blue',
    Purple: 'purple',
    MidnightBlue: 'midnight-blue',
    Orange: 'orange',
    YellowGreen: 'yellow-green',
    Brass: 'brass',
    Gray: 'gray',
    Fuchsia: 'fuchsia',
    Yellow: 'yellow',
    Pink: 'pink',
    SkyBlue: 'sky-blue',
    Green: 'green',
    Red: 'red',
    Black: 'black',
    Slate: 'slate',
    Turquoise: 'turquoise'
} as const;
export type GroupColorKeyEnum = typeof GroupColorKeyEnum[keyof typeof GroupColorKeyEnum];


/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appUrl" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "archived" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "color" in value;
    isInstance = isInstance && "numStoriesStarted" in value;
    isInstance = isInstance && "mentionName" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "globalId" in value;
    isInstance = isInstance && "colorKey" in value;
    isInstance = isInstance && "numStories" in value;
    isInstance = isInstance && "numEpicsStarted" in value;
    isInstance = isInstance && "numStoriesBacklog" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "displayIcon" in value;
    isInstance = isInstance && "memberIds" in value;
    isInstance = isInstance && "workflowIds" in value;

    return isInstance;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appUrl': json['app_url'],
        'description': json['description'],
        'archived': json['archived'],
        'entityType': json['entity_type'],
        'color': json['color'],
        'numStoriesStarted': json['num_stories_started'],
        'mentionName': json['mention_name'],
        'name': json['name'],
        'globalId': json['global_id'],
        'colorKey': json['color_key'],
        'numStories': json['num_stories'],
        'numEpicsStarted': json['num_epics_started'],
        'numStoriesBacklog': json['num_stories_backlog'],
        'id': json['id'],
        'displayIcon': IconFromJSON(json['display_icon']),
        'memberIds': json['member_ids'],
        'workflowIds': json['workflow_ids'],
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'app_url': value.appUrl,
        'description': value.description,
        'archived': value.archived,
        'entity_type': value.entityType,
        'color': value.color,
        'num_stories_started': value.numStoriesStarted,
        'mention_name': value.mentionName,
        'name': value.name,
        'global_id': value.globalId,
        'color_key': value.colorKey,
        'num_stories': value.numStories,
        'num_epics_started': value.numEpicsStarted,
        'num_stories_backlog': value.numStoriesBacklog,
        'id': value.id,
        'display_icon': IconToJSON(value.displayIcon),
        'member_ids': value.memberIds,
        'workflow_ids': value.workflowIds,
    };
}

