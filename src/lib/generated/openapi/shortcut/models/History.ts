/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A history item is a group of actions that represent a transactional change to a Story.
 * @export
 * @interface History
 */
export interface History {
    /**
     * The date when the change occurred.
     * @type {string}
     * @memberof History
     */
    changedAt: string;
    /**
     * The ID of the primary entity that has changed, if applicable.
     * @type {object}
     * @memberof History
     */
    primaryId?: object;
    /**
     * An array of objects affected by the change. Reference objects provide basic information for the entities reference in the history actions. Some have specific fields, but they always contain an id, entity_type, and a name.
     * @type {Array<object>}
     * @memberof History
     */
    references?: Array<object>;
    /**
     * An array of actions that were performed for the change.
     * @type {Array<object>}
     * @memberof History
     */
    actions: Array<object>;
    /**
     * The ID of the member who performed the change.
     * @type {string}
     * @memberof History
     */
    memberId?: string;
    /**
     * The ID of the webhook that handled the change.
     * @type {string}
     * @memberof History
     */
    externalId?: string;
    /**
     * The ID representing the change for the story.
     * @type {string}
     * @memberof History
     */
    id: string;
    /**
     * The version of the change format.
     * @type {string}
     * @memberof History
     */
    version: HistoryVersionEnum;
    /**
     * The ID of the webhook that handled the change.
     * @type {string}
     * @memberof History
     */
    webhookId?: string | null;
}


/**
 * @export
 */
export const HistoryVersionEnum = {
    V1: 'v1'
} as const;
export type HistoryVersionEnum = typeof HistoryVersionEnum[keyof typeof HistoryVersionEnum];


/**
 * Check if a given object implements the History interface.
 */
export function instanceOfHistory(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "changedAt" in value;
    isInstance = isInstance && "actions" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function HistoryFromJSON(json: any): History {
    return HistoryFromJSONTyped(json, false);
}

export function HistoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): History {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changedAt': json['changed_at'],
        'primaryId': !exists(json, 'primary_id') ? undefined : json['primary_id'],
        'references': !exists(json, 'references') ? undefined : json['references'],
        'actions': json['actions'],
        'memberId': !exists(json, 'member_id') ? undefined : json['member_id'],
        'externalId': !exists(json, 'external_id') ? undefined : json['external_id'],
        'id': json['id'],
        'version': json['version'],
        'webhookId': !exists(json, 'webhook_id') ? undefined : json['webhook_id'],
    };
}

export function HistoryToJSON(value?: History | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'changed_at': value.changedAt,
        'primary_id': value.primaryId,
        'references': value.references,
        'actions': value.actions,
        'member_id': value.memberId,
        'external_id': value.externalId,
        'id': value.id,
        'version': value.version,
        'webhook_id': value.webhookId,
    };
}

