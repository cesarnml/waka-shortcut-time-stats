/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An action representing various operations for a Pull Request.
 * @export
 * @interface HistoryActionPullRequest
 */
export interface HistoryActionPullRequest {
    /**
     * The ID of the entity referenced.
     * @type {number}
     * @memberof HistoryActionPullRequest
     */
    id: number;
    /**
     * The type of entity referenced.
     * @type {string}
     * @memberof HistoryActionPullRequest
     */
    entityType: string;
    /**
     * The action of the entity referenced.
     * @type {string}
     * @memberof HistoryActionPullRequest
     */
    action: HistoryActionPullRequestActionEnum;
    /**
     * The VCS Repository-specific ID for the Pull Request.
     * @type {number}
     * @memberof HistoryActionPullRequest
     */
    number: number;
    /**
     * The title of the Pull Request.
     * @type {string}
     * @memberof HistoryActionPullRequest
     */
    title: string;
    /**
     * The URL from the provider of the VCS Pull Request.
     * @type {string}
     * @memberof HistoryActionPullRequest
     */
    url: string;
}


/**
 * @export
 */
export const HistoryActionPullRequestActionEnum = {
    Open: 'open',
    Update: 'update',
    Reopen: 'reopen',
    Close: 'close',
    Sync: 'sync',
    Comment: 'comment'
} as const;
export type HistoryActionPullRequestActionEnum = typeof HistoryActionPullRequestActionEnum[keyof typeof HistoryActionPullRequestActionEnum];


/**
 * Check if a given object implements the HistoryActionPullRequest interface.
 */
export function instanceOfHistoryActionPullRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function HistoryActionPullRequestFromJSON(json: any): HistoryActionPullRequest {
    return HistoryActionPullRequestFromJSONTyped(json, false);
}

export function HistoryActionPullRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoryActionPullRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'entityType': json['entity_type'],
        'action': json['action'],
        'number': json['number'],
        'title': json['title'],
        'url': json['url'],
    };
}

export function HistoryActionPullRequestToJSON(value?: HistoryActionPullRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'entity_type': value.entityType,
        'action': value.action,
        'number': value.number,
        'title': value.title,
        'url': value.url,
    };
}

