/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An action representing a Story being created.
 * @export
 * @interface HistoryActionStoryCreate
 */
export interface HistoryActionStoryCreate {
    /**
     * The application URL of the Story.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    appUrl: string;
    /**
     * The description of the Story.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    description?: string;
    /**
     * Whether or not the Story has been started.
     * @type {boolean}
     * @memberof HistoryActionStoryCreate
     */
    started?: boolean;
    /**
     * The type of entity referenced.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    entityType: string;
    /**
     * An array of Task IDs on this Story.
     * @type {Array<number>}
     * @memberof HistoryActionStoryCreate
     */
    taskIds?: Array<number>;
    /**
     * The type of Story; either feature, bug, or chore.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    storyType: HistoryActionStoryCreateStoryTypeEnum;
    /**
     * The name of the Story.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    name: string;
    /**
     * Whether or not the Story is completed.
     * @type {boolean}
     * @memberof HistoryActionStoryCreate
     */
    completed?: boolean;
    /**
     * Whether or not the Story is blocking another Story.
     * @type {boolean}
     * @memberof HistoryActionStoryCreate
     */
    blocker?: boolean;
    /**
     * The Epic ID for this Story.
     * @type {number}
     * @memberof HistoryActionStoryCreate
     */
    epicId?: number;
    /**
     * The ID of the Member that requested the Story.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    requestedById?: string;
    /**
     * The Iteration ID the Story is in.
     * @type {number}
     * @memberof HistoryActionStoryCreate
     */
    iterationId?: number | null;
    /**
     * An array of Labels IDs attached to the Story.
     * @type {Array<number>}
     * @memberof HistoryActionStoryCreate
     */
    labelIds?: Array<number>;
    /**
     * The Team IDs for the followers of the Story.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    groupId?: string;
    /**
     * An array of Workflow State IDs attached to the Story.
     * @type {number}
     * @memberof HistoryActionStoryCreate
     */
    workflowStateId?: number;
    /**
     * An array of Story IDs that are the object of a Story Link relationship.
     * @type {Array<number>}
     * @memberof HistoryActionStoryCreate
     */
    objectStoryLinkIds?: Array<number>;
    /**
     * An array of Member IDs for the followers of the Story.
     * @type {Array<string>}
     * @memberof HistoryActionStoryCreate
     */
    followerIds?: Array<string>;
    /**
     * An array of Member IDs that are the owners of the Story.
     * @type {Array<string>}
     * @memberof HistoryActionStoryCreate
     */
    ownerIds?: Array<string>;
    /**
     * An array of Custom Field Enum Value ids on this Story.
     * @type {Array<string>}
     * @memberof HistoryActionStoryCreate
     */
    customFieldValueIds?: Array<string>;
    /**
     * The ID of the entity referenced.
     * @type {number}
     * @memberof HistoryActionStoryCreate
     */
    id: number;
    /**
     * The estimate (or point value) for the Story.
     * @type {number}
     * @memberof HistoryActionStoryCreate
     */
    estimate?: number;
    /**
     * An array of Story IDs that are the subject of a Story Link relationship.
     * @type {Array<number>}
     * @memberof HistoryActionStoryCreate
     */
    subjectStoryLinkIds?: Array<number>;
    /**
     * The action of the entity referenced.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    action: HistoryActionStoryCreateActionEnum;
    /**
     * Whether or not the Story is blocked by another Story.
     * @type {boolean}
     * @memberof HistoryActionStoryCreate
     */
    blocked?: boolean;
    /**
     * The Project ID of the Story is in.
     * @type {number}
     * @memberof HistoryActionStoryCreate
     */
    projectId?: number;
    /**
     * The timestamp representing the Story's deadline.
     * @type {string}
     * @memberof HistoryActionStoryCreate
     */
    deadline?: string;
}


/**
 * @export
 */
export const HistoryActionStoryCreateStoryTypeEnum = {
    Feature: 'feature',
    Chore: 'chore',
    Bug: 'bug'
} as const;
export type HistoryActionStoryCreateStoryTypeEnum = typeof HistoryActionStoryCreateStoryTypeEnum[keyof typeof HistoryActionStoryCreateStoryTypeEnum];

/**
 * @export
 */
export const HistoryActionStoryCreateActionEnum = {
    Create: 'create'
} as const;
export type HistoryActionStoryCreateActionEnum = typeof HistoryActionStoryCreateActionEnum[keyof typeof HistoryActionStoryCreateActionEnum];


/**
 * Check if a given object implements the HistoryActionStoryCreate interface.
 */
export function instanceOfHistoryActionStoryCreate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appUrl" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "storyType" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "action" in value;

    return isInstance;
}

export function HistoryActionStoryCreateFromJSON(json: any): HistoryActionStoryCreate {
    return HistoryActionStoryCreateFromJSONTyped(json, false);
}

export function HistoryActionStoryCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoryActionStoryCreate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appUrl': json['app_url'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'started': !exists(json, 'started') ? undefined : json['started'],
        'entityType': json['entity_type'],
        'taskIds': !exists(json, 'task_ids') ? undefined : json['task_ids'],
        'storyType': json['story_type'],
        'name': json['name'],
        'completed': !exists(json, 'completed') ? undefined : json['completed'],
        'blocker': !exists(json, 'blocker') ? undefined : json['blocker'],
        'epicId': !exists(json, 'epic_id') ? undefined : json['epic_id'],
        'requestedById': !exists(json, 'requested_by_id') ? undefined : json['requested_by_id'],
        'iterationId': !exists(json, 'iteration_id') ? undefined : json['iteration_id'],
        'labelIds': !exists(json, 'label_ids') ? undefined : json['label_ids'],
        'groupId': !exists(json, 'group_id') ? undefined : json['group_id'],
        'workflowStateId': !exists(json, 'workflow_state_id') ? undefined : json['workflow_state_id'],
        'objectStoryLinkIds': !exists(json, 'object_story_link_ids') ? undefined : json['object_story_link_ids'],
        'followerIds': !exists(json, 'follower_ids') ? undefined : json['follower_ids'],
        'ownerIds': !exists(json, 'owner_ids') ? undefined : json['owner_ids'],
        'customFieldValueIds': !exists(json, 'custom_field_value_ids') ? undefined : json['custom_field_value_ids'],
        'id': json['id'],
        'estimate': !exists(json, 'estimate') ? undefined : json['estimate'],
        'subjectStoryLinkIds': !exists(json, 'subject_story_link_ids') ? undefined : json['subject_story_link_ids'],
        'action': json['action'],
        'blocked': !exists(json, 'blocked') ? undefined : json['blocked'],
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'deadline': !exists(json, 'deadline') ? undefined : json['deadline'],
    };
}

export function HistoryActionStoryCreateToJSON(value?: HistoryActionStoryCreate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'app_url': value.appUrl,
        'description': value.description,
        'started': value.started,
        'entity_type': value.entityType,
        'task_ids': value.taskIds,
        'story_type': value.storyType,
        'name': value.name,
        'completed': value.completed,
        'blocker': value.blocker,
        'epic_id': value.epicId,
        'requested_by_id': value.requestedById,
        'iteration_id': value.iterationId,
        'label_ids': value.labelIds,
        'group_id': value.groupId,
        'workflow_state_id': value.workflowStateId,
        'object_story_link_ids': value.objectStoryLinkIds,
        'follower_ids': value.followerIds,
        'owner_ids': value.ownerIds,
        'custom_field_value_ids': value.customFieldValueIds,
        'id': value.id,
        'estimate': value.estimate,
        'subject_story_link_ids': value.subjectStoryLinkIds,
        'action': value.action,
        'blocked': value.blocked,
        'project_id': value.projectId,
        'deadline': value.deadline,
    };
}

