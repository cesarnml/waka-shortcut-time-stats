/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HistoryChangesStory } from './HistoryChangesStory';
import {
    HistoryChangesStoryFromJSON,
    HistoryChangesStoryFromJSONTyped,
    HistoryChangesStoryToJSON,
} from './HistoryChangesStory';

/**
 * An action representing a Story being updated.
 * @export
 * @interface HistoryActionStoryUpdate
 */
export interface HistoryActionStoryUpdate {
    /**
     * The ID of the entity referenced.
     * @type {number}
     * @memberof HistoryActionStoryUpdate
     */
    id: number;
    /**
     * The type of entity referenced.
     * @type {string}
     * @memberof HistoryActionStoryUpdate
     */
    entityType: string;
    /**
     * The action of the entity referenced.
     * @type {string}
     * @memberof HistoryActionStoryUpdate
     */
    action: HistoryActionStoryUpdateActionEnum;
    /**
     * The application URL of the Story.
     * @type {string}
     * @memberof HistoryActionStoryUpdate
     */
    appUrl: string;
    /**
     * 
     * @type {HistoryChangesStory}
     * @memberof HistoryActionStoryUpdate
     */
    changes?: HistoryChangesStory;
    /**
     * The name of the Story.
     * @type {string}
     * @memberof HistoryActionStoryUpdate
     */
    name: string;
    /**
     * The type of Story; either feature, bug, or chore.
     * @type {string}
     * @memberof HistoryActionStoryUpdate
     */
    storyType: HistoryActionStoryUpdateStoryTypeEnum;
}


/**
 * @export
 */
export const HistoryActionStoryUpdateActionEnum = {
    Update: 'update'
} as const;
export type HistoryActionStoryUpdateActionEnum = typeof HistoryActionStoryUpdateActionEnum[keyof typeof HistoryActionStoryUpdateActionEnum];

/**
 * @export
 */
export const HistoryActionStoryUpdateStoryTypeEnum = {
    Feature: 'feature',
    Chore: 'chore',
    Bug: 'bug'
} as const;
export type HistoryActionStoryUpdateStoryTypeEnum = typeof HistoryActionStoryUpdateStoryTypeEnum[keyof typeof HistoryActionStoryUpdateStoryTypeEnum];


/**
 * Check if a given object implements the HistoryActionStoryUpdate interface.
 */
export function instanceOfHistoryActionStoryUpdate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "appUrl" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "storyType" in value;

    return isInstance;
}

export function HistoryActionStoryUpdateFromJSON(json: any): HistoryActionStoryUpdate {
    return HistoryActionStoryUpdateFromJSONTyped(json, false);
}

export function HistoryActionStoryUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoryActionStoryUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'entityType': json['entity_type'],
        'action': json['action'],
        'appUrl': json['app_url'],
        'changes': !exists(json, 'changes') ? undefined : HistoryChangesStoryFromJSON(json['changes']),
        'name': json['name'],
        'storyType': json['story_type'],
    };
}

export function HistoryActionStoryUpdateToJSON(value?: HistoryActionStoryUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'entity_type': value.entityType,
        'action': value.action,
        'app_url': value.appUrl,
        'changes': HistoryChangesStoryToJSON(value.changes),
        'name': value.name,
        'story_type': value.storyType,
    };
}

