/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HistoryChangesTask } from './HistoryChangesTask';
import {
    HistoryChangesTaskFromJSON,
    HistoryChangesTaskFromJSONTyped,
    HistoryChangesTaskToJSON,
} from './HistoryChangesTask';

/**
 * An action representing a Task being updated.
 * @export
 * @interface HistoryActionTaskUpdate
 */
export interface HistoryActionTaskUpdate {
    /**
     * The ID of the entity referenced.
     * @type {number}
     * @memberof HistoryActionTaskUpdate
     */
    id: number;
    /**
     * The type of entity referenced.
     * @type {string}
     * @memberof HistoryActionTaskUpdate
     */
    entityType: string;
    /**
     * The action of the entity referenced.
     * @type {string}
     * @memberof HistoryActionTaskUpdate
     */
    action: HistoryActionTaskUpdateActionEnum;
    /**
     * 
     * @type {HistoryChangesTask}
     * @memberof HistoryActionTaskUpdate
     */
    changes: HistoryChangesTask;
    /**
     * Whether or not the Task is complete.
     * @type {boolean}
     * @memberof HistoryActionTaskUpdate
     */
    complete?: boolean;
    /**
     * The description of the Task.
     * @type {string}
     * @memberof HistoryActionTaskUpdate
     */
    description: string;
    /**
     * The Story ID that contains the Task.
     * @type {number}
     * @memberof HistoryActionTaskUpdate
     */
    storyId: number;
}


/**
 * @export
 */
export const HistoryActionTaskUpdateActionEnum = {
    Update: 'update'
} as const;
export type HistoryActionTaskUpdateActionEnum = typeof HistoryActionTaskUpdateActionEnum[keyof typeof HistoryActionTaskUpdateActionEnum];


/**
 * Check if a given object implements the HistoryActionTaskUpdate interface.
 */
export function instanceOfHistoryActionTaskUpdate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "changes" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "storyId" in value;

    return isInstance;
}

export function HistoryActionTaskUpdateFromJSON(json: any): HistoryActionTaskUpdate {
    return HistoryActionTaskUpdateFromJSONTyped(json, false);
}

export function HistoryActionTaskUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoryActionTaskUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'entityType': json['entity_type'],
        'action': json['action'],
        'changes': HistoryChangesTaskFromJSON(json['changes']),
        'complete': !exists(json, 'complete') ? undefined : json['complete'],
        'description': json['description'],
        'storyId': json['story_id'],
    };
}

export function HistoryActionTaskUpdateToJSON(value?: HistoryActionTaskUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'entity_type': value.entityType,
        'action': value.action,
        'changes': HistoryChangesTaskToJSON(value.changes),
        'complete': value.complete,
        'description': value.description,
        'story_id': value.storyId,
    };
}

