/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IterationAssociatedGroup } from './IterationAssociatedGroup';
import {
    IterationAssociatedGroupFromJSON,
    IterationAssociatedGroupFromJSONTyped,
    IterationAssociatedGroupToJSON,
} from './IterationAssociatedGroup';
import type { IterationStats } from './IterationStats';
import {
    IterationStatsFromJSON,
    IterationStatsFromJSONTyped,
    IterationStatsToJSON,
} from './IterationStats';
import type { Label } from './Label';
import {
    LabelFromJSON,
    LabelFromJSONTyped,
    LabelToJSON,
} from './Label';

/**
 * An Iteration is a defined, time-boxed period of development for a collection of Stories. See https://help.shortcut.com/hc/en-us/articles/360028953452-Iterations-Overview for more information.
 * @export
 * @interface Iteration
 */
export interface Iteration {
    /**
     * The Shortcut application url for the Iteration.
     * @type {string}
     * @memberof Iteration
     */
    appUrl: string;
    /**
     * The description of the iteration.
     * @type {string}
     * @memberof Iteration
     */
    description: string;
    /**
     * A string description of this resource
     * @type {string}
     * @memberof Iteration
     */
    entityType: string;
    /**
     * An array of labels attached to the iteration.
     * @type {Array<Label>}
     * @memberof Iteration
     */
    labels: Array<Label>;
    /**
     * Deprecated: use member_mention_ids.
     * @type {Array<string>}
     * @memberof Iteration
     */
    mentionIds: Array<string>;
    /**
     * An array of Member IDs that have been mentioned in the Story description.
     * @type {Array<string>}
     * @memberof Iteration
     */
    memberMentionIds: Array<string>;
    /**
     * An array containing Group IDs and Group-owned story counts for the Iteration's associated groups.
     * @type {Array<IterationAssociatedGroup>}
     * @memberof Iteration
     */
    associatedGroups: Array<IterationAssociatedGroup>;
    /**
     * The name of the iteration.
     * @type {string}
     * @memberof Iteration
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Iteration
     */
    globalId: string;
    /**
     * An array of label ids attached to the iteration.
     * @type {Array<number>}
     * @memberof Iteration
     */
    labelIds: Array<number>;
    /**
     * The instant when this iteration was last updated.
     * @type {Date}
     * @memberof Iteration
     */
    updatedAt: Date;
    /**
     * An array of Group IDs that have been mentioned in the Story description.
     * @type {Array<string>}
     * @memberof Iteration
     */
    groupMentionIds: Array<string>;
    /**
     * The date this iteration begins.
     * @type {Date}
     * @memberof Iteration
     */
    endDate: Date;
    /**
     * An array of UUIDs for any Members listed as Followers.
     * @type {Array<string>}
     * @memberof Iteration
     */
    followerIds: Array<string>;
    /**
     * An array of UUIDs for any Groups you want to add as Followers. Currently, only one Group association is presented in our web UI.
     * @type {Array<string>}
     * @memberof Iteration
     */
    groupIds: Array<string>;
    /**
     * The date this iteration begins.
     * @type {Date}
     * @memberof Iteration
     */
    startDate: Date;
    /**
     * The status of the iteration. Values are either "unstarted", "started", or "done".
     * @type {string}
     * @memberof Iteration
     */
    status: string;
    /**
     * The ID of the iteration.
     * @type {number}
     * @memberof Iteration
     */
    id: number;
    /**
     * 
     * @type {IterationStats}
     * @memberof Iteration
     */
    stats: IterationStats;
    /**
     * The instant when this iteration was created.
     * @type {Date}
     * @memberof Iteration
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the Iteration interface.
 */
export function instanceOfIteration(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appUrl" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "labels" in value;
    isInstance = isInstance && "mentionIds" in value;
    isInstance = isInstance && "memberMentionIds" in value;
    isInstance = isInstance && "associatedGroups" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "globalId" in value;
    isInstance = isInstance && "labelIds" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "groupMentionIds" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "followerIds" in value;
    isInstance = isInstance && "groupIds" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "stats" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function IterationFromJSON(json: any): Iteration {
    return IterationFromJSONTyped(json, false);
}

export function IterationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Iteration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appUrl': json['app_url'],
        'description': json['description'],
        'entityType': json['entity_type'],
        'labels': ((json['labels'] as Array<any>).map(LabelFromJSON)),
        'mentionIds': json['mention_ids'],
        'memberMentionIds': json['member_mention_ids'],
        'associatedGroups': ((json['associated_groups'] as Array<any>).map(IterationAssociatedGroupFromJSON)),
        'name': json['name'],
        'globalId': json['global_id'],
        'labelIds': json['label_ids'],
        'updatedAt': (new Date(json['updated_at'])),
        'groupMentionIds': json['group_mention_ids'],
        'endDate': (new Date(json['end_date'])),
        'followerIds': json['follower_ids'],
        'groupIds': json['group_ids'],
        'startDate': (new Date(json['start_date'])),
        'status': json['status'],
        'id': json['id'],
        'stats': IterationStatsFromJSON(json['stats']),
        'createdAt': (new Date(json['created_at'])),
    };
}

export function IterationToJSON(value?: Iteration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'app_url': value.appUrl,
        'description': value.description,
        'entity_type': value.entityType,
        'labels': ((value.labels as Array<any>).map(LabelToJSON)),
        'mention_ids': value.mentionIds,
        'member_mention_ids': value.memberMentionIds,
        'associated_groups': ((value.associatedGroups as Array<any>).map(IterationAssociatedGroupToJSON)),
        'name': value.name,
        'global_id': value.globalId,
        'label_ids': value.labelIds,
        'updated_at': (value.updatedAt.toISOString()),
        'group_mention_ids': value.groupMentionIds,
        'end_date': (value.endDate.toISOString()),
        'follower_ids': value.followerIds,
        'group_ids': value.groupIds,
        'start_date': (value.startDate.toISOString()),
        'status': value.status,
        'id': value.id,
        'stats': IterationStatsToJSON(value.stats),
        'created_at': (value.createdAt.toISOString()),
    };
}

