/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LabelStats } from './LabelStats';
import {
    LabelStatsFromJSON,
    LabelStatsFromJSONTyped,
    LabelStatsToJSON,
} from './LabelStats';

/**
 * A Label can be used to associate and filter Stories and Epics, and also create new Workspaces.
 * @export
 * @interface Label
 */
export interface Label {
    /**
     * The Shortcut application url for the Label.
     * @type {string}
     * @memberof Label
     */
    appUrl: string;
    /**
     * The description of the Label.
     * @type {string}
     * @memberof Label
     */
    description: string | null;
    /**
     * A true/false boolean indicating if the Label has been archived.
     * @type {boolean}
     * @memberof Label
     */
    archived: boolean;
    /**
     * A string description of this resource.
     * @type {string}
     * @memberof Label
     */
    entityType: string;
    /**
     * The hex color to be displayed with the Label (for example, "#ff0000").
     * @type {string}
     * @memberof Label
     */
    color: string | null;
    /**
     * The name of the Label.
     * @type {string}
     * @memberof Label
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    globalId: string;
    /**
     * The time/date that the Label was updated.
     * @type {Date}
     * @memberof Label
     */
    updatedAt: Date | null;
    /**
     * This field can be set to another unique ID. In the case that the Label has been imported from another tool, the ID in the other tool can be indicated here.
     * @type {string}
     * @memberof Label
     */
    externalId: string | null;
    /**
     * The unique ID of the Label.
     * @type {number}
     * @memberof Label
     */
    id: number;
    /**
     * 
     * @type {LabelStats}
     * @memberof Label
     */
    stats?: LabelStats;
    /**
     * The time/date that the Label was created.
     * @type {Date}
     * @memberof Label
     */
    createdAt: Date | null;
}

/**
 * Check if a given object implements the Label interface.
 */
export function instanceOfLabel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appUrl" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "archived" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "color" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "globalId" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "externalId" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function LabelFromJSON(json: any): Label {
    return LabelFromJSONTyped(json, false);
}

export function LabelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Label {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appUrl': json['app_url'],
        'description': json['description'],
        'archived': json['archived'],
        'entityType': json['entity_type'],
        'color': json['color'],
        'name': json['name'],
        'globalId': json['global_id'],
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'externalId': json['external_id'],
        'id': json['id'],
        'stats': !exists(json, 'stats') ? undefined : LabelStatsFromJSON(json['stats']),
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
    };
}

export function LabelToJSON(value?: Label | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'app_url': value.appUrl,
        'description': value.description,
        'archived': value.archived,
        'entity_type': value.entityType,
        'color': value.color,
        'name': value.name,
        'global_id': value.globalId,
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'external_id': value.externalId,
        'id': value.id,
        'stats': LabelStatsToJSON(value.stats),
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
    };
}

