/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A group of calculated values for this Label. This is not included if the slim? flag is set to true for the List Labels endpoint.
 * @export
 * @interface LabelStats
 */
export interface LabelStats {
    /**
     * The total number of Documents associated this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numRelatedDocuments: number;
    /**
     * The total number of Epics with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numEpics: number;
    /**
     * The total number of stories unstarted Stories with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numStoriesUnstarted: number;
    /**
     * The total number of Stories with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numStoriesTotal: number;
    /**
     * The number of unstarted epics associated with this label.
     * @type {number}
     * @memberof LabelStats
     */
    numEpicsUnstarted: number;
    /**
     * The number of in progress epics associated with this label.
     * @type {number}
     * @memberof LabelStats
     */
    numEpicsInProgress: number;
    /**
     * The total number of unstarted points with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numPointsUnstarted: number;
    /**
     * The total number of Stories with no point estimate with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numStoriesUnestimated: number;
    /**
     * The total number of in-progress points with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numPointsInProgress: number;
    /**
     * The total number of Epics associated with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numEpicsTotal: number;
    /**
     * The total number of completed Stories with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numStoriesCompleted: number;
    /**
     * The total number of completed points with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numPointsCompleted: number;
    /**
     * The total number of stories backlog Stories with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numStoriesBacklog: number;
    /**
     * The total number of points with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numPointsTotal: number;
    /**
     * The total number of in-progress Stories with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numStoriesInProgress: number;
    /**
     * The total number of backlog points with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numPointsBacklog: number;
    /**
     * The number of completed Epics associated with this Label.
     * @type {number}
     * @memberof LabelStats
     */
    numEpicsCompleted: number;
}

/**
 * Check if a given object implements the LabelStats interface.
 */
export function instanceOfLabelStats(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "numRelatedDocuments" in value;
    isInstance = isInstance && "numEpics" in value;
    isInstance = isInstance && "numStoriesUnstarted" in value;
    isInstance = isInstance && "numStoriesTotal" in value;
    isInstance = isInstance && "numEpicsUnstarted" in value;
    isInstance = isInstance && "numEpicsInProgress" in value;
    isInstance = isInstance && "numPointsUnstarted" in value;
    isInstance = isInstance && "numStoriesUnestimated" in value;
    isInstance = isInstance && "numPointsInProgress" in value;
    isInstance = isInstance && "numEpicsTotal" in value;
    isInstance = isInstance && "numStoriesCompleted" in value;
    isInstance = isInstance && "numPointsCompleted" in value;
    isInstance = isInstance && "numStoriesBacklog" in value;
    isInstance = isInstance && "numPointsTotal" in value;
    isInstance = isInstance && "numStoriesInProgress" in value;
    isInstance = isInstance && "numPointsBacklog" in value;
    isInstance = isInstance && "numEpicsCompleted" in value;

    return isInstance;
}

export function LabelStatsFromJSON(json: any): LabelStats {
    return LabelStatsFromJSONTyped(json, false);
}

export function LabelStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LabelStats {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'numRelatedDocuments': json['num_related_documents'],
        'numEpics': json['num_epics'],
        'numStoriesUnstarted': json['num_stories_unstarted'],
        'numStoriesTotal': json['num_stories_total'],
        'numEpicsUnstarted': json['num_epics_unstarted'],
        'numEpicsInProgress': json['num_epics_in_progress'],
        'numPointsUnstarted': json['num_points_unstarted'],
        'numStoriesUnestimated': json['num_stories_unestimated'],
        'numPointsInProgress': json['num_points_in_progress'],
        'numEpicsTotal': json['num_epics_total'],
        'numStoriesCompleted': json['num_stories_completed'],
        'numPointsCompleted': json['num_points_completed'],
        'numStoriesBacklog': json['num_stories_backlog'],
        'numPointsTotal': json['num_points_total'],
        'numStoriesInProgress': json['num_stories_in_progress'],
        'numPointsBacklog': json['num_points_backlog'],
        'numEpicsCompleted': json['num_epics_completed'],
    };
}

export function LabelStatsToJSON(value?: LabelStats | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'num_related_documents': value.numRelatedDocuments,
        'num_epics': value.numEpics,
        'num_stories_unstarted': value.numStoriesUnstarted,
        'num_stories_total': value.numStoriesTotal,
        'num_epics_unstarted': value.numEpicsUnstarted,
        'num_epics_in_progress': value.numEpicsInProgress,
        'num_points_unstarted': value.numPointsUnstarted,
        'num_stories_unestimated': value.numStoriesUnestimated,
        'num_points_in_progress': value.numPointsInProgress,
        'num_epics_total': value.numEpicsTotal,
        'num_stories_completed': value.numStoriesCompleted,
        'num_points_completed': value.numPointsCompleted,
        'num_stories_backlog': value.numStoriesBacklog,
        'num_points_total': value.numPointsTotal,
        'num_stories_in_progress': value.numStoriesInProgress,
        'num_points_backlog': value.numPointsBacklog,
        'num_epics_completed': value.numEpicsCompleted,
    };
}

