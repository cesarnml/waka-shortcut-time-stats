/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Linked files are stored on a third-party website and linked to one or more Stories. Shortcut currently supports linking files from Google Drive, Dropbox, Box, and by URL.
 * @export
 * @interface LinkedFile
 */
export interface LinkedFile {
    /**
     * The description of the file.
     * @type {string}
     * @memberof LinkedFile
     */
    description: string | null;
    /**
     * A string description of this resource.
     * @type {string}
     * @memberof LinkedFile
     */
    entityType: string;
    /**
     * The IDs of the stories this file is attached to.
     * @type {Array<number>}
     * @memberof LinkedFile
     */
    storyIds: Array<number>;
    /**
     * Deprecated: use member_mention_ids.
     * @type {Array<string>}
     * @memberof LinkedFile
     */
    mentionIds: Array<string>;
    /**
     * The members that are mentioned in the description of the file.
     * @type {Array<string>}
     * @memberof LinkedFile
     */
    memberMentionIds: Array<string>;
    /**
     * The name of the linked file.
     * @type {string}
     * @memberof LinkedFile
     */
    name: string;
    /**
     * The URL of the file thumbnail, if the integration provided it.
     * @type {string}
     * @memberof LinkedFile
     */
    thumbnailUrl: string | null;
    /**
     * The integration type (e.g. google, dropbox, box).
     * @type {string}
     * @memberof LinkedFile
     */
    type: string;
    /**
     * The filesize, if the integration provided it.
     * @type {number}
     * @memberof LinkedFile
     */
    size: number | null;
    /**
     * The UUID of the member that uploaded the file.
     * @type {string}
     * @memberof LinkedFile
     */
    uploaderId: string;
    /**
     * The content type of the image (e.g. txt/plain).
     * @type {string}
     * @memberof LinkedFile
     */
    contentType: string | null;
    /**
     * The time/date the LinkedFile was updated.
     * @type {Date}
     * @memberof LinkedFile
     */
    updatedAt: Date;
    /**
     * The groups that are mentioned in the description of the file.
     * @type {Array<string>}
     * @memberof LinkedFile
     */
    groupMentionIds: Array<string>;
    /**
     * The unique identifier for the file.
     * @type {number}
     * @memberof LinkedFile
     */
    id: number;
    /**
     * The URL of the file.
     * @type {string}
     * @memberof LinkedFile
     */
    url: string;
    /**
     * The time/date the LinkedFile was created.
     * @type {Date}
     * @memberof LinkedFile
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the LinkedFile interface.
 */
export function instanceOfLinkedFile(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "storyIds" in value;
    isInstance = isInstance && "mentionIds" in value;
    isInstance = isInstance && "memberMentionIds" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "thumbnailUrl" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "uploaderId" in value;
    isInstance = isInstance && "contentType" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "groupMentionIds" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function LinkedFileFromJSON(json: any): LinkedFile {
    return LinkedFileFromJSONTyped(json, false);
}

export function LinkedFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedFile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'entityType': json['entity_type'],
        'storyIds': json['story_ids'],
        'mentionIds': json['mention_ids'],
        'memberMentionIds': json['member_mention_ids'],
        'name': json['name'],
        'thumbnailUrl': json['thumbnail_url'],
        'type': json['type'],
        'size': json['size'],
        'uploaderId': json['uploader_id'],
        'contentType': json['content_type'],
        'updatedAt': (new Date(json['updated_at'])),
        'groupMentionIds': json['group_mention_ids'],
        'id': json['id'],
        'url': json['url'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function LinkedFileToJSON(value?: LinkedFile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'entity_type': value.entityType,
        'story_ids': value.storyIds,
        'mention_ids': value.mentionIds,
        'member_mention_ids': value.memberMentionIds,
        'name': value.name,
        'thumbnail_url': value.thumbnailUrl,
        'type': value.type,
        'size': value.size,
        'uploader_id': value.uploaderId,
        'content_type': value.contentType,
        'updated_at': (value.updatedAt.toISOString()),
        'group_mention_ids': value.groupMentionIds,
        'id': value.id,
        'url': value.url,
        'created_at': (value.createdAt.toISOString()),
    };
}

