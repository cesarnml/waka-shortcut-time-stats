/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 * Error returned when total maximum supported results have been reached.
 * @export
 * @interface MaxSearchResultsExceededError
 */
export interface MaxSearchResultsExceededError {
  /**
   * The name for this type of error, `maximum-results-exceeded`
   * @type {string}
   * @memberof MaxSearchResultsExceededError
   */
  error: MaxSearchResultsExceededErrorErrorEnum
  /**
   * An explanatory message: "A maximum of 1000 search results are supported."
   * @type {string}
   * @memberof MaxSearchResultsExceededError
   */
  message: string
  /**
   * The maximum number of search results supported, `1000`
   * @type {number}
   * @memberof MaxSearchResultsExceededError
   */
  maximumResults: MaxSearchResultsExceededErrorMaximumResultsEnum
}

/**
 * @export
 */
export const MaxSearchResultsExceededErrorErrorEnum = {
  MaximumResultsExceeded: 'maximum-results-exceeded',
} as const
export type MaxSearchResultsExceededErrorErrorEnum =
  (typeof MaxSearchResultsExceededErrorErrorEnum)[keyof typeof MaxSearchResultsExceededErrorErrorEnum]

/**
 * @export
 */
export const MaxSearchResultsExceededErrorMaximumResultsEnum = {
  NUMBER_1000: 1000,
} as const
export type MaxSearchResultsExceededErrorMaximumResultsEnum =
  (typeof MaxSearchResultsExceededErrorMaximumResultsEnum)[keyof typeof MaxSearchResultsExceededErrorMaximumResultsEnum]

/**
 * Check if a given object implements the MaxSearchResultsExceededError interface.
 */
export function instanceOfMaxSearchResultsExceededError(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'error' in value
  isInstance = isInstance && 'message' in value
  isInstance = isInstance && 'maximumResults' in value

  return isInstance
}

export function MaxSearchResultsExceededErrorFromJSON(json: any): MaxSearchResultsExceededError {
  return MaxSearchResultsExceededErrorFromJSONTyped(json, false)
}

export function MaxSearchResultsExceededErrorFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MaxSearchResultsExceededError {
  if (json === undefined || json === null) {
    return json
  }
  return {
    error: json['error'],
    message: json['message'],
    maximumResults: json['maximum-results'],
  }
}

export function MaxSearchResultsExceededErrorToJSON(
  value?: MaxSearchResultsExceededError | null,
): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    error: value.error,
    message: value.message,
    'maximum-results': value.maximumResults,
  }
}
