/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { Icon } from './Icon'
import { IconFromJSON, IconFromJSONTyped, IconToJSON } from './Icon'

/**
 * A group of Member profile details.
 * @export
 * @interface Profile
 */
export interface Profile {
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof Profile
   */
  entityType: string
  /**
   * A true/false boolean indicating whether the Member has been deactivated within Shortcut.
   * @type {boolean}
   * @memberof Profile
   */
  deactivated: boolean
  /**
   * If Two Factor Authentication is activated for this User.
   * @type {boolean}
   * @memberof Profile
   */
  twoFactorAuthActivated?: boolean
  /**
   * The Member's username within the Organization.
   * @type {string}
   * @memberof Profile
   */
  mentionName: string
  /**
   * The Member's name within the Organization.
   * @type {string}
   * @memberof Profile
   */
  name: string | null
  /**
   * This is the gravatar hash associated with email_address.
   * @type {string}
   * @memberof Profile
   */
  gravatarHash: string | null
  /**
   * The unique identifier of the profile.
   * @type {string}
   * @memberof Profile
   */
  id: string
  /**
   *
   * @type {Icon}
   * @memberof Profile
   */
  displayIcon: Icon
  /**
   * A boolean indicating whether this profile is an owner at their associated organization.
   * @type {boolean}
   * @memberof Profile
   */
  isOwner: boolean
  /**
   * The primary email address of the Member with the Organization.
   * @type {string}
   * @memberof Profile
   */
  emailAddress: string | null
}

/**
 * Check if a given object implements the Profile interface.
 */
export function instanceOfProfile(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'deactivated' in value
  isInstance = isInstance && 'mentionName' in value
  isInstance = isInstance && 'name' in value
  isInstance = isInstance && 'gravatarHash' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'displayIcon' in value
  isInstance = isInstance && 'isOwner' in value
  isInstance = isInstance && 'emailAddress' in value

  return isInstance
}

export function ProfileFromJSON(json: any): Profile {
  return ProfileFromJSONTyped(json, false)
}

export function ProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): Profile {
  if (json === undefined || json === null) {
    return json
  }
  return {
    entityType: json['entity_type'],
    deactivated: json['deactivated'],
    twoFactorAuthActivated: !exists(json, 'two_factor_auth_activated')
      ? undefined
      : json['two_factor_auth_activated'],
    mentionName: json['mention_name'],
    name: json['name'],
    gravatarHash: json['gravatar_hash'],
    id: json['id'],
    displayIcon: IconFromJSON(json['display_icon']),
    isOwner: json['is_owner'],
    emailAddress: json['email_address'],
  }
}

export function ProfileToJSON(value?: Profile | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    entity_type: value.entityType,
    deactivated: value.deactivated,
    two_factor_auth_activated: value.twoFactorAuthActivated,
    mention_name: value.mentionName,
    name: value.name,
    gravatar_hash: value.gravatarHash,
    id: value.id,
    display_icon: IconToJSON(value.displayIcon),
    is_owner: value.isOwner,
    email_address: value.emailAddress,
  }
}
