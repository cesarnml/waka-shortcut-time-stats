/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface Search
 */
export interface Search {
  /**
   * See our help center article on [search operators](https://help.shortcut.com/hc/en-us/articles/360000046646-Search-Operators)
   * @type {string}
   * @memberof Search
   */
  query: string
  /**
   * The number of search results to include in a page. Minimum of 1 and maximum of 25.
   * @type {number}
   * @memberof Search
   */
  pageSize?: number
  /**
   * The amount of detail included in each result item.
   *    "full" will include all descriptions and comments and more fields on
   *    related items such as pull requests, branches and tasks.
   *    "slim" omits larger fulltext fields such as descriptions and comments
   *    and only references related items by id.
   *    The default is "full".
   * @type {string}
   * @memberof Search
   */
  detail?: SearchDetailEnum
  /**
   * The next page token.
   * @type {string}
   * @memberof Search
   */
  next?: string
  /**
   *
   * @type {string}
   * @memberof Search
   */
  include?: SearchIncludeEnum
  /**
   * A collection of entity_types to search. Defaults to story and epic. Supports: epic, iteration, milestone, story.
   * @type {Array<string>}
   * @memberof Search
   */
  entityTypes?: Array<SearchEntityTypesEnum>
}

/**
 * @export
 */
export const SearchDetailEnum = {
  Full: 'full',
  Slim: 'slim',
} as const
export type SearchDetailEnum = (typeof SearchDetailEnum)[keyof typeof SearchDetailEnum]

/**
 * @export
 */
export const SearchIncludeEnum = {
  Cursors: 'cursors',
} as const
export type SearchIncludeEnum = (typeof SearchIncludeEnum)[keyof typeof SearchIncludeEnum]

/**
 * @export
 */
export const SearchEntityTypesEnum = {
  Story: 'story',
  Milestone: 'milestone',
  Epic: 'epic',
  Iteration: 'iteration',
} as const
export type SearchEntityTypesEnum =
  (typeof SearchEntityTypesEnum)[keyof typeof SearchEntityTypesEnum]

/**
 * Check if a given object implements the Search interface.
 */
export function instanceOfSearch(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'query' in value

  return isInstance
}

export function SearchFromJSON(json: any): Search {
  return SearchFromJSONTyped(json, false)
}

export function SearchFromJSONTyped(json: any, ignoreDiscriminator: boolean): Search {
  if (json === undefined || json === null) {
    return json
  }
  return {
    query: json['query'],
    pageSize: !exists(json, 'page_size') ? undefined : json['page_size'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    next: !exists(json, 'next') ? undefined : json['next'],
    include: !exists(json, 'include') ? undefined : json['include'],
    entityTypes: !exists(json, 'entity_types') ? undefined : json['entity_types'],
  }
}

export function SearchToJSON(value?: Search | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    query: value.query,
    page_size: value.pageSize,
    detail: value.detail,
    next: value.next,
    include: value.include,
    entity_types: value.entityTypes,
  }
}
