/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface SearchStories
 */
export interface SearchStories {
  /**
   * A true/false boolean indicating whether the Story is in archived state.
   * @type {boolean}
   * @memberof SearchStories
   */
  archived?: boolean
  /**
   * An array of UUIDs for any Users who may be Owners of the Stories.
   * @type {string}
   * @memberof SearchStories
   */
  ownerId?: string | null
  /**
   * The type of Stories that you want returned.
   * @type {string}
   * @memberof SearchStories
   */
  storyType?: SearchStoriesStoryTypeEnum
  /**
   * The Epic IDs that may be associated with the Stories.
   * @type {Set<number>}
   * @memberof SearchStories
   */
  epicIds?: Set<number>
  /**
   * The IDs for the Projects the Stories may be assigned to.
   * @type {Set<number>}
   * @memberof SearchStories
   */
  projectIds?: Set<number>
  /**
   * Stories should have been updated before this date.
   * @type {Date}
   * @memberof SearchStories
   */
  updatedAtEnd?: Date
  /**
   * Stories should have been completed before this date.
   * @type {Date}
   * @memberof SearchStories
   */
  completedAtEnd?: Date
  /**
   * The type of Workflow State the Stories may be in.
   * @type {Array<string>}
   * @memberof SearchStories
   */
  workflowStateTypes?: Array<SearchStoriesWorkflowStateTypesEnum>
  /**
   * Stories should have a deadline before this date.
   * @type {Date}
   * @memberof SearchStories
   */
  deadlineEnd?: Date
  /**
   * Stories should have been created after this date.
   * @type {Date}
   * @memberof SearchStories
   */
  createdAtStart?: Date
  /**
   * The Epic IDs that may be associated with the Stories.
   * @type {number}
   * @memberof SearchStories
   */
  epicId?: number | null
  /**
   * The name of any associated Labels.
   * @type {string}
   * @memberof SearchStories
   */
  labelName?: string
  /**
   * The UUID of any Users who may have requested the Stories.
   * @type {string}
   * @memberof SearchStories
   */
  requestedById?: string
  /**
   * The Iteration ID that may be associated with the Stories.
   * @type {number}
   * @memberof SearchStories
   */
  iterationId?: number | null
  /**
   * The Label IDs that may be associated with the Stories.
   * @type {Set<number>}
   * @memberof SearchStories
   */
  labelIds?: Set<number>
  /**
   * The Group ID that is associated with the Stories
   * @type {string}
   * @memberof SearchStories
   */
  groupId?: string | null
  /**
   * The unique IDs of the specific Workflow States that the Stories should be in.
   * @type {number}
   * @memberof SearchStories
   */
  workflowStateId?: number
  /**
   * The Iteration IDs that may be associated with the Stories.
   * @type {Set<number>}
   * @memberof SearchStories
   */
  iterationIds?: Set<number>
  /**
   * Stories should have been created before this date.
   * @type {Date}
   * @memberof SearchStories
   */
  createdAtEnd?: Date
  /**
   * Stories should have a deadline after this date.
   * @type {Date}
   * @memberof SearchStories
   */
  deadlineStart?: Date
  /**
   * The Group IDs that are associated with the Stories
   * @type {Set<string>}
   * @memberof SearchStories
   */
  groupIds?: Set<string>
  /**
   * An array of UUIDs for any Users who may be Owners of the Stories.
   * @type {Set<string>}
   * @memberof SearchStories
   */
  ownerIds?: Set<string>
  /**
   * An ID or URL that references an external resource. Useful during imports.
   * @type {string}
   * @memberof SearchStories
   */
  externalId?: string
  /**
   * Whether to include the story description in the response.
   * @type {boolean}
   * @memberof SearchStories
   */
  includesDescription?: boolean
  /**
   * The number of estimate points associate with the Stories.
   * @type {number}
   * @memberof SearchStories
   */
  estimate?: number
  /**
   * The IDs for the Projects the Stories may be assigned to.
   * @type {number}
   * @memberof SearchStories
   */
  projectId?: number | null
  /**
   * Stories should have been completed after this date.
   * @type {Date}
   * @memberof SearchStories
   */
  completedAtStart?: Date
  /**
   * Stories should have been updated after this date.
   * @type {Date}
   * @memberof SearchStories
   */
  updatedAtStart?: Date
}

/**
 * @export
 */
export const SearchStoriesStoryTypeEnum = {
  Feature: 'feature',
  Chore: 'chore',
  Bug: 'bug',
} as const
export type SearchStoriesStoryTypeEnum =
  (typeof SearchStoriesStoryTypeEnum)[keyof typeof SearchStoriesStoryTypeEnum]

/**
 * @export
 */
export const SearchStoriesWorkflowStateTypesEnum = {
  Started: 'started',
  Backlog: 'backlog',
  Unstarted: 'unstarted',
  Done: 'done',
} as const
export type SearchStoriesWorkflowStateTypesEnum =
  (typeof SearchStoriesWorkflowStateTypesEnum)[keyof typeof SearchStoriesWorkflowStateTypesEnum]

/**
 * Check if a given object implements the SearchStories interface.
 */
export function instanceOfSearchStories(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function SearchStoriesFromJSON(json: any): SearchStories {
  return SearchStoriesFromJSONTyped(json, false)
}

export function SearchStoriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchStories {
  if (json === undefined || json === null) {
    return json
  }
  return {
    archived: !exists(json, 'archived') ? undefined : json['archived'],
    ownerId: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    storyType: !exists(json, 'story_type') ? undefined : json['story_type'],
    epicIds: !exists(json, 'epic_ids') ? undefined : json['epic_ids'],
    projectIds: !exists(json, 'project_ids') ? undefined : json['project_ids'],
    updatedAtEnd: !exists(json, 'updated_at_end') ? undefined : new Date(json['updated_at_end']),
    completedAtEnd: !exists(json, 'completed_at_end')
      ? undefined
      : new Date(json['completed_at_end']),
    workflowStateTypes: !exists(json, 'workflow_state_types')
      ? undefined
      : json['workflow_state_types'],
    deadlineEnd: !exists(json, 'deadline_end') ? undefined : new Date(json['deadline_end']),
    createdAtStart: !exists(json, 'created_at_start')
      ? undefined
      : new Date(json['created_at_start']),
    epicId: !exists(json, 'epic_id') ? undefined : json['epic_id'],
    labelName: !exists(json, 'label_name') ? undefined : json['label_name'],
    requestedById: !exists(json, 'requested_by_id') ? undefined : json['requested_by_id'],
    iterationId: !exists(json, 'iteration_id') ? undefined : json['iteration_id'],
    labelIds: !exists(json, 'label_ids') ? undefined : json['label_ids'],
    groupId: !exists(json, 'group_id') ? undefined : json['group_id'],
    workflowStateId: !exists(json, 'workflow_state_id') ? undefined : json['workflow_state_id'],
    iterationIds: !exists(json, 'iteration_ids') ? undefined : json['iteration_ids'],
    createdAtEnd: !exists(json, 'created_at_end') ? undefined : new Date(json['created_at_end']),
    deadlineStart: !exists(json, 'deadline_start') ? undefined : new Date(json['deadline_start']),
    groupIds: !exists(json, 'group_ids') ? undefined : json['group_ids'],
    ownerIds: !exists(json, 'owner_ids') ? undefined : json['owner_ids'],
    externalId: !exists(json, 'external_id') ? undefined : json['external_id'],
    includesDescription: !exists(json, 'includes_description')
      ? undefined
      : json['includes_description'],
    estimate: !exists(json, 'estimate') ? undefined : json['estimate'],
    projectId: !exists(json, 'project_id') ? undefined : json['project_id'],
    completedAtStart: !exists(json, 'completed_at_start')
      ? undefined
      : new Date(json['completed_at_start']),
    updatedAtStart: !exists(json, 'updated_at_start')
      ? undefined
      : new Date(json['updated_at_start']),
  }
}

export function SearchStoriesToJSON(value?: SearchStories | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    archived: value.archived,
    owner_id: value.ownerId,
    story_type: value.storyType,
    epic_ids: value.epicIds === undefined ? undefined : Array.from(value.epicIds as Set<any>),
    project_ids:
      value.projectIds === undefined ? undefined : Array.from(value.projectIds as Set<any>),
    updated_at_end: value.updatedAtEnd === undefined ? undefined : value.updatedAtEnd.toISOString(),
    completed_at_end:
      value.completedAtEnd === undefined ? undefined : value.completedAtEnd.toISOString(),
    workflow_state_types: value.workflowStateTypes,
    deadline_end: value.deadlineEnd === undefined ? undefined : value.deadlineEnd.toISOString(),
    created_at_start:
      value.createdAtStart === undefined ? undefined : value.createdAtStart.toISOString(),
    epic_id: value.epicId,
    label_name: value.labelName,
    requested_by_id: value.requestedById,
    iteration_id: value.iterationId,
    label_ids: value.labelIds === undefined ? undefined : Array.from(value.labelIds as Set<any>),
    group_id: value.groupId,
    workflow_state_id: value.workflowStateId,
    iteration_ids:
      value.iterationIds === undefined ? undefined : Array.from(value.iterationIds as Set<any>),
    created_at_end: value.createdAtEnd === undefined ? undefined : value.createdAtEnd.toISOString(),
    deadline_start:
      value.deadlineStart === undefined ? undefined : value.deadlineStart.toISOString(),
    group_ids: value.groupIds === undefined ? undefined : Array.from(value.groupIds as Set<any>),
    owner_ids: value.ownerIds === undefined ? undefined : Array.from(value.ownerIds as Set<any>),
    external_id: value.externalId,
    includes_description: value.includesDescription,
    estimate: value.estimate,
    project_id: value.projectId,
    completed_at_start:
      value.completedAtStart === undefined ? undefined : value.completedAtStart.toISOString(),
    updated_at_start:
      value.updatedAtStart === undefined ? undefined : value.updatedAtStart.toISOString(),
  }
}
