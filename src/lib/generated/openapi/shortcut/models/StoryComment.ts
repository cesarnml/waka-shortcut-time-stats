/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { StoryReaction } from './StoryReaction'
import {
  StoryReactionFromJSON,
  StoryReactionFromJSONTyped,
  StoryReactionToJSON,
} from './StoryReaction'

/**
 * A Comment is any note added within the Comment field of a Story.
 * @export
 * @interface StoryComment
 */
export interface StoryComment {
  /**
   * The Shortcut application url for the Comment.
   * @type {string}
   * @memberof StoryComment
   */
  appUrl: string
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof StoryComment
   */
  entityType: string
  /**
   * True/false boolean indicating whether the Comment has been deleted.
   * @type {boolean}
   * @memberof StoryComment
   */
  deleted: boolean
  /**
   * The ID of the Story on which the Comment appears.
   * @type {number}
   * @memberof StoryComment
   */
  storyId: number
  /**
   * Deprecated: use member_mention_ids.
   * @type {Array<string>}
   * @memberof StoryComment
   */
  mentionIds: Array<string>
  /**
   * The unique ID of the Member who is the Comment's author.
   * @type {string}
   * @memberof StoryComment
   */
  authorId: string | null
  /**
   * The unique IDs of the Member who are mentioned in the Comment.
   * @type {Array<string>}
   * @memberof StoryComment
   */
  memberMentionIds: Array<string>
  /**
   * Marks the comment as a blocker that can be surfaced to permissions or teams mentioned in the comment. Can only be used on a top-level comment.
   * @type {boolean}
   * @memberof StoryComment
   */
  blocker?: boolean
  /**
   * The time/date when the Comment was updated.
   * @type {Date}
   * @memberof StoryComment
   */
  updatedAt: Date | null
  /**
   * The unique IDs of the Group who are mentioned in the Comment.
   * @type {Array<string>}
   * @memberof StoryComment
   */
  groupMentionIds: Array<string>
  /**
   * This field can be set to another unique ID. In the case that the Comment has been imported from another tool, the ID in the other tool can be indicated here.
   * @type {string}
   * @memberof StoryComment
   */
  externalId: string | null
  /**
   * The ID of the parent Comment this Comment is threaded under.
   * @type {number}
   * @memberof StoryComment
   */
  parentId?: number | null
  /**
   * The unique ID of the Comment.
   * @type {number}
   * @memberof StoryComment
   */
  id: number
  /**
   * The Comments numerical position in the list from oldest to newest.
   * @type {number}
   * @memberof StoryComment
   */
  position: number
  /**
   * Marks the comment as an unblocker to its  blocker parent. Can only be set on a threaded comment who has a parent with `blocker` set.
   * @type {boolean}
   * @memberof StoryComment
   */
  unblocksParent?: boolean
  /**
   * A set of Reactions to this Comment.
   * @type {Array<StoryReaction>}
   * @memberof StoryComment
   */
  reactions: Array<StoryReaction>
  /**
   * The time/date when the Comment was created.
   * @type {Date}
   * @memberof StoryComment
   */
  createdAt: Date
  /**
   * The text of the Comment. In the case that the Comment has been deleted, this field can be set to nil.
   * @type {string}
   * @memberof StoryComment
   */
  text: string | null
}

/**
 * Check if a given object implements the StoryComment interface.
 */
export function instanceOfStoryComment(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'appUrl' in value
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'deleted' in value
  isInstance = isInstance && 'storyId' in value
  isInstance = isInstance && 'mentionIds' in value
  isInstance = isInstance && 'authorId' in value
  isInstance = isInstance && 'memberMentionIds' in value
  isInstance = isInstance && 'updatedAt' in value
  isInstance = isInstance && 'groupMentionIds' in value
  isInstance = isInstance && 'externalId' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'position' in value
  isInstance = isInstance && 'reactions' in value
  isInstance = isInstance && 'createdAt' in value
  isInstance = isInstance && 'text' in value

  return isInstance
}

export function StoryCommentFromJSON(json: any): StoryComment {
  return StoryCommentFromJSONTyped(json, false)
}

export function StoryCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoryComment {
  if (json === undefined || json === null) {
    return json
  }
  return {
    appUrl: json['app_url'],
    entityType: json['entity_type'],
    deleted: json['deleted'],
    storyId: json['story_id'],
    mentionIds: json['mention_ids'],
    authorId: json['author_id'],
    memberMentionIds: json['member_mention_ids'],
    blocker: !exists(json, 'blocker') ? undefined : json['blocker'],
    updatedAt: json['updated_at'] === null ? null : new Date(json['updated_at']),
    groupMentionIds: json['group_mention_ids'],
    externalId: json['external_id'],
    parentId: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    id: json['id'],
    position: json['position'],
    unblocksParent: !exists(json, 'unblocks_parent') ? undefined : json['unblocks_parent'],
    reactions: (json['reactions'] as Array<any>).map(StoryReactionFromJSON),
    createdAt: new Date(json['created_at']),
    text: json['text'],
  }
}

export function StoryCommentToJSON(value?: StoryComment | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    app_url: value.appUrl,
    entity_type: value.entityType,
    deleted: value.deleted,
    story_id: value.storyId,
    mention_ids: value.mentionIds,
    author_id: value.authorId,
    member_mention_ids: value.memberMentionIds,
    blocker: value.blocker,
    updated_at: value.updatedAt === null ? null : value.updatedAt.toISOString(),
    group_mention_ids: value.groupMentionIds,
    external_id: value.externalId,
    parent_id: value.parentId,
    id: value.id,
    position: value.position,
    unblocks_parent: value.unblocksParent,
    reactions: (value.reactions as Array<any>).map(StoryReactionToJSON),
    created_at: value.createdAt.toISOString(),
    text: value.text,
  }
}
