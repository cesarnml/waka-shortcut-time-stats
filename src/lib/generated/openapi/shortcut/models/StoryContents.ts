/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { CustomFieldValueParams } from './CustomFieldValueParams'
import {
  CustomFieldValueParamsFromJSON,
  CustomFieldValueParamsFromJSONTyped,
  CustomFieldValueParamsToJSON,
} from './CustomFieldValueParams'
import type { LabelSlim } from './LabelSlim'
import { LabelSlimFromJSON, LabelSlimFromJSONTyped, LabelSlimToJSON } from './LabelSlim'
import type { LinkedFile } from './LinkedFile'
import { LinkedFileFromJSON, LinkedFileFromJSONTyped, LinkedFileToJSON } from './LinkedFile'
import type { StoryContentsTask } from './StoryContentsTask'
import {
  StoryContentsTaskFromJSON,
  StoryContentsTaskFromJSONTyped,
  StoryContentsTaskToJSON,
} from './StoryContentsTask'
import type { UploadedFile } from './UploadedFile'
import { UploadedFileFromJSON, UploadedFileFromJSONTyped, UploadedFileToJSON } from './UploadedFile'

/**
 * A container entity for the attributes this template should populate.
 * @export
 * @interface StoryContents
 */
export interface StoryContents {
  /**
   * The description of the story.
   * @type {string}
   * @memberof StoryContents
   */
  description?: string
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof StoryContents
   */
  entityType?: string
  /**
   * An array of labels attached to the story.
   * @type {Array<LabelSlim>}
   * @memberof StoryContents
   */
  labels?: Array<LabelSlim>
  /**
   * The type of story (feature, bug, chore).
   * @type {string}
   * @memberof StoryContents
   */
  storyType?: string
  /**
   * An array of maps specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
   * @type {Array<CustomFieldValueParams>}
   * @memberof StoryContents
   */
  customFields?: Array<CustomFieldValueParams>
  /**
   * An array of linked files attached to the story.
   * @type {Array<LinkedFile>}
   * @memberof StoryContents
   */
  linkedFiles?: Array<LinkedFile>
  /**
   * The name of the story.
   * @type {string}
   * @memberof StoryContents
   */
  name?: string
  /**
   * The ID of the epic the story belongs to.
   * @type {number}
   * @memberof StoryContents
   */
  epicId?: number
  /**
   * An array of external links connected to the story.
   * @type {Array<string>}
   * @memberof StoryContents
   */
  externalLinks?: Array<string>
  /**
   * The ID of the iteration the story belongs to.
   * @type {number}
   * @memberof StoryContents
   */
  iterationId?: number
  /**
   * An array of tasks connected to the story.
   * @type {Array<StoryContentsTask>}
   * @memberof StoryContents
   */
  tasks?: Array<StoryContentsTask>
  /**
   * An array of label ids attached to the story.
   * @type {Array<number>}
   * @memberof StoryContents
   */
  labelIds?: Array<number>
  /**
   * The ID of the group to which the story is assigned.
   * @type {string}
   * @memberof StoryContents
   */
  groupId?: string
  /**
   * The ID of the workflow state the story is currently in.
   * @type {number}
   * @memberof StoryContents
   */
  workflowStateId?: number
  /**
   * An array of UUIDs for any Members listed as Followers.
   * @type {Array<string>}
   * @memberof StoryContents
   */
  followerIds?: Array<string>
  /**
   * An array of UUIDs of the owners of this story.
   * @type {Array<string>}
   * @memberof StoryContents
   */
  ownerIds?: Array<string>
  /**
   * The numeric point estimate of the story. Can also be null, which means unestimated.
   * @type {number}
   * @memberof StoryContents
   */
  estimate?: number
  /**
   * An array of files attached to the story.
   * @type {Array<UploadedFile>}
   * @memberof StoryContents
   */
  files?: Array<UploadedFile>
  /**
   * The ID of the project the story belongs to.
   * @type {number}
   * @memberof StoryContents
   */
  projectId?: number
  /**
   * The due date of the story.
   * @type {Date}
   * @memberof StoryContents
   */
  deadline?: Date
}

/**
 * Check if a given object implements the StoryContents interface.
 */
export function instanceOfStoryContents(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function StoryContentsFromJSON(json: any): StoryContents {
  return StoryContentsFromJSONTyped(json, false)
}

export function StoryContentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoryContents {
  if (json === undefined || json === null) {
    return json
  }
  return {
    description: !exists(json, 'description') ? undefined : json['description'],
    entityType: !exists(json, 'entity_type') ? undefined : json['entity_type'],
    labels: !exists(json, 'labels')
      ? undefined
      : (json['labels'] as Array<any>).map(LabelSlimFromJSON),
    storyType: !exists(json, 'story_type') ? undefined : json['story_type'],
    customFields: !exists(json, 'custom_fields')
      ? undefined
      : (json['custom_fields'] as Array<any>).map(CustomFieldValueParamsFromJSON),
    linkedFiles: !exists(json, 'linked_files')
      ? undefined
      : (json['linked_files'] as Array<any>).map(LinkedFileFromJSON),
    name: !exists(json, 'name') ? undefined : json['name'],
    epicId: !exists(json, 'epic_id') ? undefined : json['epic_id'],
    externalLinks: !exists(json, 'external_links') ? undefined : json['external_links'],
    iterationId: !exists(json, 'iteration_id') ? undefined : json['iteration_id'],
    tasks: !exists(json, 'tasks')
      ? undefined
      : (json['tasks'] as Array<any>).map(StoryContentsTaskFromJSON),
    labelIds: !exists(json, 'label_ids') ? undefined : json['label_ids'],
    groupId: !exists(json, 'group_id') ? undefined : json['group_id'],
    workflowStateId: !exists(json, 'workflow_state_id') ? undefined : json['workflow_state_id'],
    followerIds: !exists(json, 'follower_ids') ? undefined : json['follower_ids'],
    ownerIds: !exists(json, 'owner_ids') ? undefined : json['owner_ids'],
    estimate: !exists(json, 'estimate') ? undefined : json['estimate'],
    files: !exists(json, 'files')
      ? undefined
      : (json['files'] as Array<any>).map(UploadedFileFromJSON),
    projectId: !exists(json, 'project_id') ? undefined : json['project_id'],
    deadline: !exists(json, 'deadline') ? undefined : new Date(json['deadline']),
  }
}

export function StoryContentsToJSON(value?: StoryContents | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    description: value.description,
    entity_type: value.entityType,
    labels:
      value.labels === undefined ? undefined : (value.labels as Array<any>).map(LabelSlimToJSON),
    story_type: value.storyType,
    custom_fields:
      value.customFields === undefined
        ? undefined
        : (value.customFields as Array<any>).map(CustomFieldValueParamsToJSON),
    linked_files:
      value.linkedFiles === undefined
        ? undefined
        : (value.linkedFiles as Array<any>).map(LinkedFileToJSON),
    name: value.name,
    epic_id: value.epicId,
    external_links: value.externalLinks,
    iteration_id: value.iterationId,
    tasks:
      value.tasks === undefined
        ? undefined
        : (value.tasks as Array<any>).map(StoryContentsTaskToJSON),
    label_ids: value.labelIds,
    group_id: value.groupId,
    workflow_state_id: value.workflowStateId,
    follower_ids: value.followerIds,
    owner_ids: value.ownerIds,
    estimate: value.estimate,
    files:
      value.files === undefined ? undefined : (value.files as Array<any>).map(UploadedFileToJSON),
    project_id: value.projectId,
    deadline: value.deadline === undefined ? undefined : value.deadline.toISOString(),
  }
}
