/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 * A Task on a Story.
 * @export
 * @interface Task
 */
export interface Task {
  /**
   * Full text of the Task.
   * @type {string}
   * @memberof Task
   */
  description: string
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof Task
   */
  entityType: string
  /**
   * The unique identifier of the parent Story.
   * @type {number}
   * @memberof Task
   */
  storyId: number
  /**
   * Deprecated: use member_mention_ids.
   * @type {Array<string>}
   * @memberof Task
   */
  mentionIds: Array<string>
  /**
   * An array of UUIDs of Members mentioned in this Task.
   * @type {Array<string>}
   * @memberof Task
   */
  memberMentionIds: Array<string>
  /**
   * The time/date the Task was completed.
   * @type {Date}
   * @memberof Task
   */
  completedAt: Date | null
  /**
   * The time/date the Task was updated.
   * @type {Date}
   * @memberof Task
   */
  updatedAt: Date | null
  /**
   * An array of UUIDs of Groups mentioned in this Task.
   * @type {Array<string>}
   * @memberof Task
   */
  groupMentionIds: Array<string>
  /**
   * An array of UUIDs of the Owners of this Task.
   * @type {Array<string>}
   * @memberof Task
   */
  ownerIds: Array<string>
  /**
   * This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.
   * @type {string}
   * @memberof Task
   */
  externalId: string | null
  /**
   * The unique ID of the Task.
   * @type {number}
   * @memberof Task
   */
  id: number
  /**
   * The number corresponding to the Task's position within a list of Tasks on a Story.
   * @type {number}
   * @memberof Task
   */
  position: number
  /**
   * True/false boolean indicating whether the Task has been completed.
   * @type {boolean}
   * @memberof Task
   */
  complete: boolean
  /**
   * The time/date the Task was created.
   * @type {Date}
   * @memberof Task
   */
  createdAt: Date
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'description' in value
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'storyId' in value
  isInstance = isInstance && 'mentionIds' in value
  isInstance = isInstance && 'memberMentionIds' in value
  isInstance = isInstance && 'completedAt' in value
  isInstance = isInstance && 'updatedAt' in value
  isInstance = isInstance && 'groupMentionIds' in value
  isInstance = isInstance && 'ownerIds' in value
  isInstance = isInstance && 'externalId' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'position' in value
  isInstance = isInstance && 'complete' in value
  isInstance = isInstance && 'createdAt' in value

  return isInstance
}

export function TaskFromJSON(json: any): Task {
  return TaskFromJSONTyped(json, false)
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
  if (json === undefined || json === null) {
    return json
  }
  return {
    description: json['description'],
    entityType: json['entity_type'],
    storyId: json['story_id'],
    mentionIds: json['mention_ids'],
    memberMentionIds: json['member_mention_ids'],
    completedAt: json['completed_at'] === null ? null : new Date(json['completed_at']),
    updatedAt: json['updated_at'] === null ? null : new Date(json['updated_at']),
    groupMentionIds: json['group_mention_ids'],
    ownerIds: json['owner_ids'],
    externalId: json['external_id'],
    id: json['id'],
    position: json['position'],
    complete: json['complete'],
    createdAt: new Date(json['created_at']),
  }
}

export function TaskToJSON(value?: Task | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    description: value.description,
    entity_type: value.entityType,
    story_id: value.storyId,
    mention_ids: value.mentionIds,
    member_mention_ids: value.memberMentionIds,
    completed_at: value.completedAt === null ? null : value.completedAt.toISOString(),
    updated_at: value.updatedAt === null ? null : value.updatedAt.toISOString(),
    group_mention_ids: value.groupMentionIds,
    owner_ids: value.ownerIds,
    external_id: value.externalId,
    id: value.id,
    position: value.position,
    complete: value.complete,
    created_at: value.createdAt.toISOString(),
  }
}
