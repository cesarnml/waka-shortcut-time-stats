/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 * Comments associated with Epic Discussions.
 * @export
 * @interface ThreadedComment
 */
export interface ThreadedComment {
  /**
   * The Shortcut application url for the Comment.
   * @type {string}
   * @memberof ThreadedComment
   */
  appUrl: string
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof ThreadedComment
   */
  entityType: string
  /**
   * True/false boolean indicating whether the Comment is deleted.
   * @type {boolean}
   * @memberof ThreadedComment
   */
  deleted: boolean
  /**
   * Deprecated: use member_mention_ids.
   * @type {Array<string>}
   * @memberof ThreadedComment
   */
  mentionIds: Array<string>
  /**
   * The unique ID of the Member that authored the Comment.
   * @type {string}
   * @memberof ThreadedComment
   */
  authorId: string
  /**
   * An array of Member IDs that have been mentioned in this Comment.
   * @type {Array<string>}
   * @memberof ThreadedComment
   */
  memberMentionIds: Array<string>
  /**
   * A nested array of threaded comments.
   * @type {Array<ThreadedComment>}
   * @memberof ThreadedComment
   */
  comments: Array<ThreadedComment>
  /**
   * The time/date the Comment was updated.
   * @type {Date}
   * @memberof ThreadedComment
   */
  updatedAt: Date
  /**
   * An array of Group IDs that have been mentioned in this Comment.
   * @type {Array<string>}
   * @memberof ThreadedComment
   */
  groupMentionIds: Array<string>
  /**
   * This field can be set to another unique ID. In the case that the Comment has been imported from another tool, the ID in the other tool can be indicated here.
   * @type {string}
   * @memberof ThreadedComment
   */
  externalId: string | null
  /**
   * The unique ID of the Comment.
   * @type {number}
   * @memberof ThreadedComment
   */
  id: number
  /**
   * The time/date the Comment was created.
   * @type {Date}
   * @memberof ThreadedComment
   */
  createdAt: Date
  /**
   * The text of the Comment.
   * @type {string}
   * @memberof ThreadedComment
   */
  text: string
}

/**
 * Check if a given object implements the ThreadedComment interface.
 */
export function instanceOfThreadedComment(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'appUrl' in value
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'deleted' in value
  isInstance = isInstance && 'mentionIds' in value
  isInstance = isInstance && 'authorId' in value
  isInstance = isInstance && 'memberMentionIds' in value
  isInstance = isInstance && 'comments' in value
  isInstance = isInstance && 'updatedAt' in value
  isInstance = isInstance && 'groupMentionIds' in value
  isInstance = isInstance && 'externalId' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'createdAt' in value
  isInstance = isInstance && 'text' in value

  return isInstance
}

export function ThreadedCommentFromJSON(json: any): ThreadedComment {
  return ThreadedCommentFromJSONTyped(json, false)
}

export function ThreadedCommentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ThreadedComment {
  if (json === undefined || json === null) {
    return json
  }
  return {
    appUrl: json['app_url'],
    entityType: json['entity_type'],
    deleted: json['deleted'],
    mentionIds: json['mention_ids'],
    authorId: json['author_id'],
    memberMentionIds: json['member_mention_ids'],
    comments: (json['comments'] as Array<any>).map(ThreadedCommentFromJSON),
    updatedAt: new Date(json['updated_at']),
    groupMentionIds: json['group_mention_ids'],
    externalId: json['external_id'],
    id: json['id'],
    createdAt: new Date(json['created_at']),
    text: json['text'],
  }
}

export function ThreadedCommentToJSON(value?: ThreadedComment | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    app_url: value.appUrl,
    entity_type: value.entityType,
    deleted: value.deleted,
    mention_ids: value.mentionIds,
    author_id: value.authorId,
    member_mention_ids: value.memberMentionIds,
    comments: (value.comments as Array<any>).map(ThreadedCommentToJSON),
    updated_at: value.updatedAt.toISOString(),
    group_mention_ids: value.groupMentionIds,
    external_id: value.externalId,
    id: value.id,
    created_at: value.createdAt.toISOString(),
    text: value.text,
  }
}
