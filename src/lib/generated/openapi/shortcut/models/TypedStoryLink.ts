/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The type of Story Link. The string can be subject or object. 
 * @export
 * @interface TypedStoryLink
 */
export interface TypedStoryLink {
    /**
     * A string description of this resource.
     * @type {string}
     * @memberof TypedStoryLink
     */
    entityType: string;
    /**
     * The ID of the object Story.
     * @type {number}
     * @memberof TypedStoryLink
     */
    objectId: number;
    /**
     * How the subject Story acts on the object Story. This can be "blocks", "duplicates", or "relates to".
     * @type {string}
     * @memberof TypedStoryLink
     */
    verb: string;
    /**
     * This indicates whether the Story is the subject or object in the Story Link.
     * @type {string}
     * @memberof TypedStoryLink
     */
    type: string;
    /**
     * The time/date when the Story Link was last updated.
     * @type {Date}
     * @memberof TypedStoryLink
     */
    updatedAt: Date;
    /**
     * The unique identifier of the Story Link.
     * @type {number}
     * @memberof TypedStoryLink
     */
    id: number;
    /**
     * The ID of the subject Story.
     * @type {number}
     * @memberof TypedStoryLink
     */
    subjectId: number;
    /**
     * The workflow state of the "subject" story.
     * @type {number}
     * @memberof TypedStoryLink
     */
    subjectWorkflowStateId: number;
    /**
     * The time/date when the Story Link was created.
     * @type {Date}
     * @memberof TypedStoryLink
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the TypedStoryLink interface.
 */
export function instanceOfTypedStoryLink(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "objectId" in value;
    isInstance = isInstance && "verb" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "subjectId" in value;
    isInstance = isInstance && "subjectWorkflowStateId" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function TypedStoryLinkFromJSON(json: any): TypedStoryLink {
    return TypedStoryLinkFromJSONTyped(json, false);
}

export function TypedStoryLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedStoryLink {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityType': json['entity_type'],
        'objectId': json['object_id'],
        'verb': json['verb'],
        'type': json['type'],
        'updatedAt': (new Date(json['updated_at'])),
        'id': json['id'],
        'subjectId': json['subject_id'],
        'subjectWorkflowStateId': json['subject_workflow_state_id'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function TypedStoryLinkToJSON(value?: TypedStoryLink | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entity_type': value.entityType,
        'object_id': value.objectId,
        'verb': value.verb,
        'type': value.type,
        'updated_at': (value.updatedAt.toISOString()),
        'id': value.id,
        'subject_id': value.subjectId,
        'subject_workflow_state_id': value.subjectWorkflowStateId,
        'created_at': (value.createdAt.toISOString()),
    };
}

