/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { UpdateCustomFieldEnumValue } from './UpdateCustomFieldEnumValue'
import {
  UpdateCustomFieldEnumValueFromJSON,
  UpdateCustomFieldEnumValueFromJSONTyped,
  UpdateCustomFieldEnumValueToJSON,
} from './UpdateCustomFieldEnumValue'

/**
 *
 * @export
 * @interface UpdateCustomField
 */
export interface UpdateCustomField {
  /**
   * Indicates whether the Field is enabled for the Workspace. Only enabled fields can be applied to Stories.
   * @type {boolean}
   * @memberof UpdateCustomField
   */
  enabled?: boolean
  /**
   * A collection of objects representing reporting periods for years.
   * @type {string}
   * @memberof UpdateCustomField
   */
  name?: string
  /**
   * A collection of EnumValue objects representing the values in the domain of some Custom Field.
   * @type {Array<UpdateCustomFieldEnumValue>}
   * @memberof UpdateCustomField
   */
  values?: Array<UpdateCustomFieldEnumValue>
  /**
   * A frontend-controlled string that represents the icon for this custom field.
   * @type {string}
   * @memberof UpdateCustomField
   */
  iconSetIdentifier?: string
  /**
   * A description of the purpose of this field.
   * @type {string}
   * @memberof UpdateCustomField
   */
  description?: string
  /**
   * The ID of the CustomField we want to move this CustomField before.
   * @type {string}
   * @memberof UpdateCustomField
   */
  beforeId?: string
  /**
   * The ID of the CustomField we want to move this CustomField after.
   * @type {string}
   * @memberof UpdateCustomField
   */
  afterId?: string
}

/**
 * Check if a given object implements the UpdateCustomField interface.
 */
export function instanceOfUpdateCustomField(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function UpdateCustomFieldFromJSON(json: any): UpdateCustomField {
  return UpdateCustomFieldFromJSONTyped(json, false)
}

export function UpdateCustomFieldFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): UpdateCustomField {
  if (json === undefined || json === null) {
    return json
  }
  return {
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
    name: !exists(json, 'name') ? undefined : json['name'],
    values: !exists(json, 'values')
      ? undefined
      : (json['values'] as Array<any>).map(UpdateCustomFieldEnumValueFromJSON),
    iconSetIdentifier: !exists(json, 'icon_set_identifier')
      ? undefined
      : json['icon_set_identifier'],
    description: !exists(json, 'description') ? undefined : json['description'],
    beforeId: !exists(json, 'before_id') ? undefined : json['before_id'],
    afterId: !exists(json, 'after_id') ? undefined : json['after_id'],
  }
}

export function UpdateCustomFieldToJSON(value?: UpdateCustomField | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    enabled: value.enabled,
    name: value.name,
    values:
      value.values === undefined
        ? undefined
        : (value.values as Array<any>).map(UpdateCustomFieldEnumValueToJSON),
    icon_set_identifier: value.iconSetIdentifier,
    description: value.description,
    before_id: value.beforeId,
    after_id: value.afterId,
  }
}
