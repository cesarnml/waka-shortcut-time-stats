/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface UpdateCustomFieldEnumValue
 */
export interface UpdateCustomFieldEnumValue {
  /**
   * The unique ID of an existing EnumValue within the CustomField's domain.
   * @type {string}
   * @memberof UpdateCustomFieldEnumValue
   */
  id?: string
  /**
   * A string value within the domain of this Custom Field.
   * @type {string}
   * @memberof UpdateCustomFieldEnumValue
   */
  value?: string
  /**
   * A color key associated with this EnumValue within the CustomField's domain.
   * @type {string}
   * @memberof UpdateCustomFieldEnumValue
   */
  colorKey?: string | null
  /**
   * Whether this EnumValue is enabled for its CustomField or not. Leaving this key out of the request leaves the current enabled state untouched.
   * @type {boolean}
   * @memberof UpdateCustomFieldEnumValue
   */
  enabled?: boolean
}

/**
 * Check if a given object implements the UpdateCustomFieldEnumValue interface.
 */
export function instanceOfUpdateCustomFieldEnumValue(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function UpdateCustomFieldEnumValueFromJSON(json: any): UpdateCustomFieldEnumValue {
  return UpdateCustomFieldEnumValueFromJSONTyped(json, false)
}

export function UpdateCustomFieldEnumValueFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): UpdateCustomFieldEnumValue {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    value: !exists(json, 'value') ? undefined : json['value'],
    colorKey: !exists(json, 'color_key') ? undefined : json['color_key'],
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
  }
}

export function UpdateCustomFieldEnumValueToJSON(value?: UpdateCustomFieldEnumValue | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    id: value.id,
    value: value.value,
    color_key: value.colorKey,
    enabled: value.enabled,
  }
}
