/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface UpdateProject
 */
export interface UpdateProject {
  /**
   * The Project's description.
   * @type {string}
   * @memberof UpdateProject
   */
  description?: string
  /**
   * A true/false boolean indicating whether the Story is in archived state.
   * @type {boolean}
   * @memberof UpdateProject
   */
  archived?: boolean
  /**
   * The number of days before the thermometer appears in the Story summary.
   * @type {number}
   * @memberof UpdateProject
   */
  daysToThermometer?: number
  /**
   * The color that represents the Project in the UI.
   * @type {string}
   * @memberof UpdateProject
   */
  color?: string
  /**
   * The Project's name.
   * @type {string}
   * @memberof UpdateProject
   */
  name?: string
  /**
   * An array of UUIDs for any Members you want to add as Followers.
   * @type {Array<string>}
   * @memberof UpdateProject
   */
  followerIds?: Array<string>
  /**
   * Configuration to enable or disable thermometers in the Story summary.
   * @type {boolean}
   * @memberof UpdateProject
   */
  showThermometer?: boolean
  /**
   * The ID of the team the project belongs to.
   * @type {number}
   * @memberof UpdateProject
   */
  teamId?: number
  /**
   * The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.
   * @type {string}
   * @memberof UpdateProject
   */
  abbreviation?: string
}

/**
 * Check if a given object implements the UpdateProject interface.
 */
export function instanceOfUpdateProject(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function UpdateProjectFromJSON(json: any): UpdateProject {
  return UpdateProjectFromJSONTyped(json, false)
}

export function UpdateProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateProject {
  if (json === undefined || json === null) {
    return json
  }
  return {
    description: !exists(json, 'description') ? undefined : json['description'],
    archived: !exists(json, 'archived') ? undefined : json['archived'],
    daysToThermometer: !exists(json, 'days_to_thermometer')
      ? undefined
      : json['days_to_thermometer'],
    color: !exists(json, 'color') ? undefined : json['color'],
    name: !exists(json, 'name') ? undefined : json['name'],
    followerIds: !exists(json, 'follower_ids') ? undefined : json['follower_ids'],
    showThermometer: !exists(json, 'show_thermometer') ? undefined : json['show_thermometer'],
    teamId: !exists(json, 'team_id') ? undefined : json['team_id'],
    abbreviation: !exists(json, 'abbreviation') ? undefined : json['abbreviation'],
  }
}

export function UpdateProjectToJSON(value?: UpdateProject | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    description: value.description,
    archived: value.archived,
    days_to_thermometer: value.daysToThermometer,
    color: value.color,
    name: value.name,
    follower_ids: value.followerIds,
    show_thermometer: value.showThermometer,
    team_id: value.teamId,
    abbreviation: value.abbreviation,
  }
}
