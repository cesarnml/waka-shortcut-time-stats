/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateLabelParams } from './CreateLabelParams';
import {
    CreateLabelParamsFromJSON,
    CreateLabelParamsFromJSONTyped,
    CreateLabelParamsToJSON,
} from './CreateLabelParams';
import type { CustomFieldValueParams } from './CustomFieldValueParams';
import {
    CustomFieldValueParamsFromJSON,
    CustomFieldValueParamsFromJSONTyped,
    CustomFieldValueParamsToJSON,
} from './CustomFieldValueParams';

/**
 * 
 * @export
 * @interface UpdateStories
 */
export interface UpdateStories {
    /**
     * If the Stories should be archived or not.
     * @type {boolean}
     * @memberof UpdateStories
     */
    archived?: boolean;
    /**
     * The Ids of the Stories you wish to update.
     * @type {Set<number>}
     * @memberof UpdateStories
     */
    storyIds: Set<number>;
    /**
     * The type of story (feature, bug, chore).
     * @type {string}
     * @memberof UpdateStories
     */
    storyType?: UpdateStoriesStoryTypeEnum;
    /**
     * One of "first" or "last". This can be used to move the given story to the first or last position in the workflow state.
     * @type {string}
     * @memberof UpdateStories
     */
    moveTo?: UpdateStoriesMoveToEnum;
    /**
     * The UUIDs of the new followers to be added.
     * @type {Set<string>}
     * @memberof UpdateStories
     */
    followerIdsAdd?: Set<string>;
    /**
     * The ID of the epic the story belongs to.
     * @type {number}
     * @memberof UpdateStories
     */
    epicId?: number | null;
    /**
     * An array of External Links associated with this story.
     * @type {Array<string>}
     * @memberof UpdateStories
     */
    externalLinks?: Array<string>;
    /**
     * The UUIDs of the followers to be removed.
     * @type {Set<string>}
     * @memberof UpdateStories
     */
    followerIdsRemove?: Set<string>;
    /**
     * The ID of the member that requested the story.
     * @type {string}
     * @memberof UpdateStories
     */
    requestedById?: string;
    /**
     * The ID of the iteration the story belongs to.
     * @type {number}
     * @memberof UpdateStories
     */
    iterationId?: number | null;
    /**
     * A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
     * @type {Array<CustomFieldValueParams>}
     * @memberof UpdateStories
     */
    customFieldsRemove?: Array<CustomFieldValueParams>;
    /**
     * An array of labels to be added.
     * @type {Array<CreateLabelParams>}
     * @memberof UpdateStories
     */
    labelsAdd?: Array<CreateLabelParams>;
    /**
     * The Id of the Group the Stories should belong to.
     * @type {string}
     * @memberof UpdateStories
     */
    groupId?: string | null;
    /**
     * The ID of the workflow state to put the stories in.
     * @type {number}
     * @memberof UpdateStories
     */
    workflowStateId?: number;
    /**
     * The ID of the story that the stories are to be moved before.
     * @type {number}
     * @memberof UpdateStories
     */
    beforeId?: number;
    /**
     * The numeric point estimate of the story. Can also be null, which means unestimated.
     * @type {number}
     * @memberof UpdateStories
     */
    estimate?: number | null;
    /**
     * The ID of the story that the stories are to be moved below.
     * @type {number}
     * @memberof UpdateStories
     */
    afterId?: number;
    /**
     * The UUIDs of the owners to be removed.
     * @type {Set<string>}
     * @memberof UpdateStories
     */
    ownerIdsRemove?: Set<string>;
    /**
     * A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
     * @type {Array<CustomFieldValueParams>}
     * @memberof UpdateStories
     */
    customFieldsAdd?: Array<CustomFieldValueParams>;
    /**
     * The ID of the Project the Stories should belong to.
     * @type {number}
     * @memberof UpdateStories
     */
    projectId?: number | null;
    /**
     * An array of labels to be removed.
     * @type {Array<CreateLabelParams>}
     * @memberof UpdateStories
     */
    labelsRemove?: Array<CreateLabelParams>;
    /**
     * The due date of the story.
     * @type {Date}
     * @memberof UpdateStories
     */
    deadline?: Date | null;
    /**
     * The UUIDs of the new owners to be added.
     * @type {Set<string>}
     * @memberof UpdateStories
     */
    ownerIdsAdd?: Set<string>;
}


/**
 * @export
 */
export const UpdateStoriesStoryTypeEnum = {
    Feature: 'feature',
    Chore: 'chore',
    Bug: 'bug'
} as const;
export type UpdateStoriesStoryTypeEnum = typeof UpdateStoriesStoryTypeEnum[keyof typeof UpdateStoriesStoryTypeEnum];

/**
 * @export
 */
export const UpdateStoriesMoveToEnum = {
    Last: 'last',
    First: 'first'
} as const;
export type UpdateStoriesMoveToEnum = typeof UpdateStoriesMoveToEnum[keyof typeof UpdateStoriesMoveToEnum];


/**
 * Check if a given object implements the UpdateStories interface.
 */
export function instanceOfUpdateStories(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "storyIds" in value;

    return isInstance;
}

export function UpdateStoriesFromJSON(json: any): UpdateStories {
    return UpdateStoriesFromJSONTyped(json, false);
}

export function UpdateStoriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateStories {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'archived': !exists(json, 'archived') ? undefined : json['archived'],
        'storyIds': json['story_ids'],
        'storyType': !exists(json, 'story_type') ? undefined : json['story_type'],
        'moveTo': !exists(json, 'move_to') ? undefined : json['move_to'],
        'followerIdsAdd': !exists(json, 'follower_ids_add') ? undefined : json['follower_ids_add'],
        'epicId': !exists(json, 'epic_id') ? undefined : json['epic_id'],
        'externalLinks': !exists(json, 'external_links') ? undefined : json['external_links'],
        'followerIdsRemove': !exists(json, 'follower_ids_remove') ? undefined : json['follower_ids_remove'],
        'requestedById': !exists(json, 'requested_by_id') ? undefined : json['requested_by_id'],
        'iterationId': !exists(json, 'iteration_id') ? undefined : json['iteration_id'],
        'customFieldsRemove': !exists(json, 'custom_fields_remove') ? undefined : ((json['custom_fields_remove'] as Array<any>).map(CustomFieldValueParamsFromJSON)),
        'labelsAdd': !exists(json, 'labels_add') ? undefined : ((json['labels_add'] as Array<any>).map(CreateLabelParamsFromJSON)),
        'groupId': !exists(json, 'group_id') ? undefined : json['group_id'],
        'workflowStateId': !exists(json, 'workflow_state_id') ? undefined : json['workflow_state_id'],
        'beforeId': !exists(json, 'before_id') ? undefined : json['before_id'],
        'estimate': !exists(json, 'estimate') ? undefined : json['estimate'],
        'afterId': !exists(json, 'after_id') ? undefined : json['after_id'],
        'ownerIdsRemove': !exists(json, 'owner_ids_remove') ? undefined : json['owner_ids_remove'],
        'customFieldsAdd': !exists(json, 'custom_fields_add') ? undefined : ((json['custom_fields_add'] as Array<any>).map(CustomFieldValueParamsFromJSON)),
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'labelsRemove': !exists(json, 'labels_remove') ? undefined : ((json['labels_remove'] as Array<any>).map(CreateLabelParamsFromJSON)),
        'deadline': !exists(json, 'deadline') ? undefined : (json['deadline'] === null ? null : new Date(json['deadline'])),
        'ownerIdsAdd': !exists(json, 'owner_ids_add') ? undefined : json['owner_ids_add'],
    };
}

export function UpdateStoriesToJSON(value?: UpdateStories | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'archived': value.archived,
        'story_ids': Array.from(value.storyIds as Set<any>),
        'story_type': value.storyType,
        'move_to': value.moveTo,
        'follower_ids_add': value.followerIdsAdd === undefined ? undefined : Array.from(value.followerIdsAdd as Set<any>),
        'epic_id': value.epicId,
        'external_links': value.externalLinks,
        'follower_ids_remove': value.followerIdsRemove === undefined ? undefined : Array.from(value.followerIdsRemove as Set<any>),
        'requested_by_id': value.requestedById,
        'iteration_id': value.iterationId,
        'custom_fields_remove': value.customFieldsRemove === undefined ? undefined : ((value.customFieldsRemove as Array<any>).map(CustomFieldValueParamsToJSON)),
        'labels_add': value.labelsAdd === undefined ? undefined : ((value.labelsAdd as Array<any>).map(CreateLabelParamsToJSON)),
        'group_id': value.groupId,
        'workflow_state_id': value.workflowStateId,
        'before_id': value.beforeId,
        'estimate': value.estimate,
        'after_id': value.afterId,
        'owner_ids_remove': value.ownerIdsRemove === undefined ? undefined : Array.from(value.ownerIdsRemove as Set<any>),
        'custom_fields_add': value.customFieldsAdd === undefined ? undefined : ((value.customFieldsAdd as Array<any>).map(CustomFieldValueParamsToJSON)),
        'project_id': value.projectId,
        'labels_remove': value.labelsRemove === undefined ? undefined : ((value.labelsRemove as Array<any>).map(CreateLabelParamsToJSON)),
        'deadline': value.deadline === undefined ? undefined : (value.deadline === null ? null : value.deadline.toISOString()),
        'owner_ids_add': value.ownerIdsAdd === undefined ? undefined : Array.from(value.ownerIdsAdd as Set<any>),
    };
}

