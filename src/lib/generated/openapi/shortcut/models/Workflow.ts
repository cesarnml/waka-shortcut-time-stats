/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { WorkflowState } from './WorkflowState'
import {
  WorkflowStateFromJSON,
  WorkflowStateFromJSONTyped,
  WorkflowStateToJSON,
} from './WorkflowState'

/**
 * Workflow is the array of defined Workflow States. Workflow can be queried using the API but must be updated in the Shortcut UI.
 * @export
 * @interface Workflow
 */
export interface Workflow {
  /**
   * A description of the workflow.
   * @type {string}
   * @memberof Workflow
   */
  description: string
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof Workflow
   */
  entityType: string
  /**
   * An array of IDs of projects within the Workflow.
   * @type {Array<number>}
   * @memberof Workflow
   */
  projectIds: Array<number>
  /**
   * A map of the states in this Workflow.
   * @type {Array<WorkflowState>}
   * @memberof Workflow
   */
  states: Array<WorkflowState>
  /**
   * The name of the workflow.
   * @type {string}
   * @memberof Workflow
   */
  name: string
  /**
   * The date the Workflow was updated.
   * @type {Date}
   * @memberof Workflow
   */
  updatedAt: Date
  /**
   * Indicates if an owner is automatically assigned when an unowned story is started.
   * @type {boolean}
   * @memberof Workflow
   */
  autoAssignOwner: boolean
  /**
   * The unique ID of the Workflow.
   * @type {number}
   * @memberof Workflow
   */
  id: number
  /**
   * The ID of the team the workflow belongs to.
   * @type {number}
   * @memberof Workflow
   */
  teamId: number
  /**
   * The date the Workflow was created.
   * @type {Date}
   * @memberof Workflow
   */
  createdAt: Date
  /**
   * The unique ID of the default state that new Stories are entered into.
   * @type {number}
   * @memberof Workflow
   */
  defaultStateId: number
}

/**
 * Check if a given object implements the Workflow interface.
 */
export function instanceOfWorkflow(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'description' in value
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'projectIds' in value
  isInstance = isInstance && 'states' in value
  isInstance = isInstance && 'name' in value
  isInstance = isInstance && 'updatedAt' in value
  isInstance = isInstance && 'autoAssignOwner' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'teamId' in value
  isInstance = isInstance && 'createdAt' in value
  isInstance = isInstance && 'defaultStateId' in value

  return isInstance
}

export function WorkflowFromJSON(json: any): Workflow {
  return WorkflowFromJSONTyped(json, false)
}

export function WorkflowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Workflow {
  if (json === undefined || json === null) {
    return json
  }
  return {
    description: json['description'],
    entityType: json['entity_type'],
    projectIds: json['project_ids'],
    states: (json['states'] as Array<any>).map(WorkflowStateFromJSON),
    name: json['name'],
    updatedAt: new Date(json['updated_at']),
    autoAssignOwner: json['auto_assign_owner'],
    id: json['id'],
    teamId: json['team_id'],
    createdAt: new Date(json['created_at']),
    defaultStateId: json['default_state_id'],
  }
}

export function WorkflowToJSON(value?: Workflow | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    description: value.description,
    entity_type: value.entityType,
    project_ids: value.projectIds,
    states: (value.states as Array<any>).map(WorkflowStateToJSON),
    name: value.name,
    updated_at: value.updatedAt.toISOString(),
    auto_assign_owner: value.autoAssignOwner,
    id: value.id,
    team_id: value.teamId,
    created_at: value.createdAt.toISOString(),
    default_state_id: value.defaultStateId,
  }
}
