/* tslint:disable */
/* eslint-disable */
/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 * Workflow State is any of the at least 3 columns. Workflow States correspond to one of 3 types: Unstarted, Started, or Done.
 * @export
 * @interface WorkflowState
 */
export interface WorkflowState {
  /**
   * The description of what sort of Stories belong in that Workflow state.
   * @type {string}
   * @memberof WorkflowState
   */
  description: string
  /**
   * A string description of this resource.
   * @type {string}
   * @memberof WorkflowState
   */
  entityType: string
  /**
   * The hex color for this Workflow State.
   * @type {string}
   * @memberof WorkflowState
   */
  color?: string
  /**
   * The verb that triggers a move to that Workflow State when making VCS commits.
   * @type {string}
   * @memberof WorkflowState
   */
  verb: string | null
  /**
   * The Workflow State's name.
   * @type {string}
   * @memberof WorkflowState
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof WorkflowState
   */
  globalId: string
  /**
   * The number of Stories currently in that Workflow State.
   * @type {number}
   * @memberof WorkflowState
   */
  numStories: number
  /**
   * The type of Workflow State (Unstarted, Started, or Finished)
   * @type {string}
   * @memberof WorkflowState
   */
  type: string
  /**
   * When the Workflow State was last updated.
   * @type {Date}
   * @memberof WorkflowState
   */
  updatedAt: Date
  /**
   * The unique ID of the Workflow State.
   * @type {number}
   * @memberof WorkflowState
   */
  id: number
  /**
   * The number of Story Templates associated with that Workflow State.
   * @type {number}
   * @memberof WorkflowState
   */
  numStoryTemplates: number
  /**
   * The position that the Workflow State is in, starting with 0 at the left.
   * @type {number}
   * @memberof WorkflowState
   */
  position: number
  /**
   * The time/date the Workflow State was created.
   * @type {Date}
   * @memberof WorkflowState
   */
  createdAt: Date
}

/**
 * Check if a given object implements the WorkflowState interface.
 */
export function instanceOfWorkflowState(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'description' in value
  isInstance = isInstance && 'entityType' in value
  isInstance = isInstance && 'verb' in value
  isInstance = isInstance && 'name' in value
  isInstance = isInstance && 'globalId' in value
  isInstance = isInstance && 'numStories' in value
  isInstance = isInstance && 'type' in value
  isInstance = isInstance && 'updatedAt' in value
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'numStoryTemplates' in value
  isInstance = isInstance && 'position' in value
  isInstance = isInstance && 'createdAt' in value

  return isInstance
}

export function WorkflowStateFromJSON(json: any): WorkflowState {
  return WorkflowStateFromJSONTyped(json, false)
}

export function WorkflowStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowState {
  if (json === undefined || json === null) {
    return json
  }
  return {
    description: json['description'],
    entityType: json['entity_type'],
    color: !exists(json, 'color') ? undefined : json['color'],
    verb: json['verb'],
    name: json['name'],
    globalId: json['global_id'],
    numStories: json['num_stories'],
    type: json['type'],
    updatedAt: new Date(json['updated_at']),
    id: json['id'],
    numStoryTemplates: json['num_story_templates'],
    position: json['position'],
    createdAt: new Date(json['created_at']),
  }
}

export function WorkflowStateToJSON(value?: WorkflowState | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    description: value.description,
    entity_type: value.entityType,
    color: value.color,
    verb: value.verb,
    name: value.name,
    global_id: value.globalId,
    num_stories: value.numStories,
    type: value.type,
    updated_at: value.updatedAt.toISOString(),
    id: value.id,
    num_story_templates: value.numStoryTemplates,
    position: value.position,
    created_at: value.createdAt.toISOString(),
  }
}
